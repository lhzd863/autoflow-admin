{"remainingRequest":"/home/k8s/nodejs/autoflow-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/k8s/nodejs/autoflow-admin/src/views/auto-flow-job/flow-job-table.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/k8s/nodejs/autoflow-admin/src/views/auto-flow-job/flow-job-table.vue","mtime":1591192840365},{"path":"/home/k8s/nodejs/autoflow-admin/node_modules/cache-loader/dist/cjs.js","mtime":1588903989540},{"path":"/home/k8s/nodejs/autoflow-admin/node_modules/babel-loader/lib/index.js","mtime":1588861182369},{"path":"/home/k8s/nodejs/autoflow-admin/node_modules/cache-loader/dist/cjs.js","mtime":1588903989540},{"path":"/home/k8s/nodejs/autoflow-admin/node_modules/vue-loader/lib/index.js","mtime":1588861203543}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport waves from '@/directive/waves' // waves directive\nimport Pagination from '@/components/Pagination' // secondary package based on el-pagination\nimport defaultConfig from '@/config'\nimport Sticky from '@/components/Sticky'\n\nconst { global_system_accesstoken, global_system_data_url, global_system_storage_key } = defaultConfig\n\nexport default {\n  name: 'FlowJobTable',\n  components: { Pagination, Sticky },\n  directives: { waves },\n  filters: {\n    statusFilter(status) {\n      const statusMap = {\n        Succ: 'success',\n        Ready: 'info',\n        Pending: 'info',\n        Submit: 'info',\n        Go: 'info',\n        Fail: 'danger',\n        Stop: 'info',\n        Running: 'warning'\n      }\n      return statusMap[status]\n    },\n    statusEffectFilter(status) {\n      const statusEffectMap = {\n        Succ: 'dark',\n        Ready: 'plain',\n        Pending: 'light',\n        Submit: 'light',\n        Go: 'light',\n        Fail: 'dark',\n        Stop: 'plain',\n        Running: 'dark'\n      }\n      return statusEffectMap[status]\n    }\n  },\n  data() {\n    return {\n      tableKey: 0,\n      listLoading: false,\n      listLoadingOuter: false,\n      tableQuery: {\n        content: '',\n        title: '',\n        sort: '+imageid',\n        total: 0,\n        srcData: null,\n        pageSizes: [10],\n        pageIndex: 1,\n        pageData: null,\n        pageLimit: 10,\n        hidden: false,\n        layout: 'total, prev, pager, next, jumper'\n      },\n      logQuery: {\n        content: '',\n        title: '',\n        sort: '+imageid',\n        total: 0,\n        srcData: null,\n        pageSizes: [10],\n        pageIndex: 1,\n        pageData: null,\n        pageLimit: 10,\n        hidden: false,\n        layout: 'total, prev, pager, next, jumper'\n      },\n      sortOptions: [{ label: 'ID Ascending', key: '+imageid' }, { label: 'ID Descending', key: '-imageid' }],\n      enableOptions: [{ label: 'Enable', key: '1' }, { label: 'Disable', key: '0' }],\n      priorityOptions: [{ label: 'Priority-0', key: '0' }, { label: 'Priority-1', key: '1' }, { label: 'Priority-2', key: '2' }, { label: 'Priority-3', key: '3' }, { label: 'Priority-4', key: '4' }],\n      timewindowOptions: [{ label: 'Enable', key: '1' }, { label: 'Disable', key: '0' }],\n      jobtypeOptions: [{ label: 'Real', key: 'D' }, { label: 'Virtual', key: 'V' }],\n      frequencyOptions: [{ label: 'Day', key: 'D' }, { label: 'Month', key: 'M' }],\n      checkbatstatusOptions: [{ label: 'Enable', key: '1' }, { label: 'Disable', key: '0' }],\n      statusOptions: [{ label: 'Ready', key: 'Ready' }, { label: 'Pending', key: 'Pending' }, { label: 'Submit', key: 'Submit' }, { label: 'Go', key: 'Go' }, { label: 'Running', key: 'Running' }, { label: 'Succ', key: 'Succ' }, { label: 'Fail', key: 'Fail' }],\n      temp: {\n        sys: undefined,\n        job: '',\n        enable: '1',\n        status: '',\n        runcontext: '',\n        server: '',\n        ip: '',\n        port: '',\n        timewindow: '',\n        retrycnt: '',\n        alert: '',\n        timetrigger: '',\n        jobtype: '',\n        frequency: '',\n        checkbatstatus: '',\n        priority: '',\n        runningcmd: '',\n        logcontent: ''\n      },\n      logtemp: {\n        logcontent: '',\n        id: '',\n        sys: '',\n        job: ''\n      },\n      dialogFormVisible: false,\n      dialogLogOuterVisible: false,\n      dialogLogInnerVisible: false,\n      dialogStatus: '',\n      textMap: {\n        update: 'Edit',\n        create: 'Create'\n      },\n      logTextMap: {\n        view: 'View',\n        list: 'List'\n      },\n      rules: {\n        sys: [{ required: true, message: 'type is required', trigger: 'change' }]\n      }\n    }\n  },\n  created() {\n  },\n  methods: {\n    getList() {\n      if ((this.tableQuery.content).length === 0) {\n        return\n      }\n      this.listLoading = true\n      let accesstoken = ''\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken\n      }\n      const url = global_system_data_url + '/flow/job/ls?accesstoken=' + accesstoken\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n          flowid: this.tableQuery.content\n        })\n      })\n        .then(response => response.json())\n        .then((responsedata) => {\n          this.listLoading = false\n          if (responsedata.status_code !== 200) {\n            this.$notify({\n              title: 'Error',\n              message: responsedata.status_txt,\n              type: 'error',\n              duration: 2000\n            })\n            return\n          }\n          this.tableQuery.srcData = responsedata.data\n          this.tableQuery.total = (responsedata.data).length\n          this.tableQuery.pageSizes = []\n          for (var i = 1; i <= this.tableQuery.total / 10 + 1; i++) {\n            this.tableQuery.pageSizes.push(i * 10)\n          }\n          this.tableQuery.pageData = this.tableQuery.srcData.slice((this.tableQuery.pageIndex - 1) * this.tableQuery.pageLimit, (this.tableQuery.pageIndex) * this.tableQuery.pageLimit)\n          this.tableQuery.pageData = this.tableQuery.pageData.sort((a, b) => (a.length === b.length) ? a.job.localeCompare(b.job) : (a.job - b.job))\n        })\n        .catch(function(err) {\n          console.log(err)\n          this.listLoading = false\n        })\n    },\n    handleFilter() {\n      if ((this.tableQuery.title).length === 0) {\n        this.getList()\n        return\n      }\n      this.tableQuery.pageIndex = 1\n      var t_data = this.tableQuery.srcData\n      this.tableQuery.pageData = []\n      var j = 0\n      for (var k = 0; k < (t_data).length; k++) {\n        var t_dat = t_data[k]\n        for (var t_key in t_dat) {\n          if (t_dat[t_key] === null) {\n            continue\n          }\n          if (String(t_dat[t_key]).indexOf(this.tableQuery.title) !== -1) {\n            this.tableQuery.pageData[j] = t_data[k]\n            j++\n            break\n          }\n        }\n      }\n      this.tableQuery.total = (this.tableQuery.pageData).length\n      this.tableQuery.pageSizes = []\n      for (var i = 1; i <= this.tableQuery.total / 10 + 1; i++) {\n        this.tableQuery.pageSizes.push(i * 10)\n      }\n    },\n    sortChange(data) {\n      console.log(data)\n      const { prop, order } = data\n      if (prop === 'imageid') {\n        this.sortByID(order)\n      }\n    },\n    sortByID(order) {\n      if (order === null) {\n        this.tableQuery.sort = this.tableQuery.sort === '+imageid' ? '-imageid' : '+imageid'\n      } else if (order === 'ascending') {\n        this.tableQuery.sort = '+imageid'\n      } else {\n        this.tableQuery.sort = '-imageid'\n      }\n      if (this.tableQuery.sort === '+imageid') {\n        this.tableQuery.pageData = this.tableQuery.pageData.sort((a, b) => (a.length === b.length) ? b.imageid.localeCompare(a.imageid) : (b.imageid - a.imageid))\n      } else {\n        this.tableQuery.pageData = this.tableQuery.pageData.sort((a, b) => (a.length === b.length) ? a.imageid.localeCompare(b.imageid) : (a.imageid - b.imageid))\n      }\n    },\n    resetTemp() {\n      this.temp = {\n        tag: '',\n        dbstore: '',\n        enable: ''\n      }\n    },\n    handleCreate() {\n      this.resetTemp()\n      this.dialogStatus = 'create'\n      this.dialogFormVisible = true\n      this.$nextTick(() => {\n        this.$refs['dataForm'].clearValidate()\n      })\n    },\n    createData() {\n      this.$refs['dataForm'].validate((valid) => {\n        if (valid) {\n          let accesstoken = ''\n          if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n            accesstoken = global_system_accesstoken\n          } else {\n            accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken\n          }\n          const url = global_system_data_url + '/flow/job/add?accesstoken=' + accesstoken\n          fetch(url, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json;charset=UTF-8'\n            },\n            body: JSON.stringify({\n              flowid: this.tableQuery.content,\n              sys: this.temp.sys,\n              job: this.temp.job,\n              timewindow: this.temp.timewindow,\n              retrycnt: this.temp.retrycnt,\n              alert: this.temp.alert,\n              timetrigger: this.temp.timetrigger,\n              jobtype: this.temp.jobtype,\n              frequency: this.temp.frequency,\n              checkbatstatus: this.temp.checkbatstatus,\n              priority: this.temp.priority,\n              runningcmd: this.temp.runningcmd,\n              enable: this.temp.enable,\n              status: this.temp.status\n            })\n          })\n            .then(response => response.json())\n            .then((responsedata) => {\n              this.dialogFormVisible = false\n              this.$notify({\n                title: 'Success',\n                message: 'Created Successfully',\n                type: 'success',\n                duration: 2000\n              })\n              this.getList()\n            })\n            .catch(function(err) {\n              console.log(err)\n              this.$notify({\n                title: 'Error',\n                message: 'Created Error',\n                type: 'error',\n                duration: 2000\n              })\n            })\n        }\n      })\n    },\n    logListData(row) {\n      if ((this.tableQuery.content).length === 0) {\n        return\n      }\n      this.listLoadingOuter = true\n      this.dialogLogOuterVisible = true\n      var key = row.sys+\".\"+row.job\n      this.logTextMap.key = key\n      this.dialogStatus = 'key'\n      let accesstoken = ''\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken\n      }\n      const url = global_system_data_url + '/flow/job/log/ls?accesstoken=' + accesstoken\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n          flowid: this.tableQuery.content,\n          sys: row.sys,\n          job: row.job\n        })\n      })\n        .then(response => response.json())\n        .then((responsedata) => {\n          this.listLoadingOuter = false\n          if (responsedata.status_code !== 200) {\n            this.$notify({\n              title: 'Error',\n              message: responsedata.status_txt,\n              type: 'error',\n              duration: 2000\n            })\n            return\n          }\n          this.logQuery.pageData = responsedata.data\n          this.logQuery.pageData = this.logQuery.pageData.sort((a, b) => (a.length === b.length) ? b.starttime.localeCompare(a.starttime) : (b.starttime - a.starttime))\n        })\n        .catch(function(err) {\n          console.log(err)\n        })\n    }, \n    handleLog(row) {\n      this.logtemp = Object.assign({}, row) // copy obj\n      this.dialogLogInnerVisible = true\n      this.logtemp.logcontent = ''\n      var key = row.sys+\".\"+row.job\n      this.logTextMap.key = key\n      this.dialogStatus = 'key'\n      for (var i = 0; i < (row.content).length; i++) {\n        this.logtemp.logcontent += row.content[i]\n      }\n    },\n    logContentData() {\n      if ((this.tableQuery.content).length === 0) {\n        return\n      }\n      let accesstoken = ''\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken\n      }\n      const url = global_system_data_url + '/flow/job/log/get?accesstoken=' + accesstoken\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n          flowid: this.tableQuery.content,\n          id: this.logtemp.id\n        })\n      })\n        .then(response => response.json())\n        .then((responsedata) => {\n          if (responsedata.status_code !== 200) {\n            this.$notify({\n              title: 'Error',\n              message: responsedata.status_txt,\n              type: 'error',\n              duration: 2000\n            })\n            return\n          }\n          var tstr = ''\n          for (var i = 0; i < (responsedata.data[0].content).length; i++) {\n            tstr +=responsedata.data[0].content[i]\n          }\n          var tid = this.logtemp.id\n          this.logtemp = Object.assign({}, {id:tid,logcontent:tstr})\n        })\n        .catch(function(err) {\n          console.log(err)\n        })\n    },\n    handleUpdate(row) {\n      this.temp = Object.assign({}, row) // copy obj\n      this.dialogStatus = 'update'\n      this.dialogFormVisible = true\n      this.$nextTick(() => {\n        this.$refs['dataForm'].clearValidate()\n      })\n    },\n    updateData() {\n      this.$refs['dataForm'].validate((valid) => {\n        if (valid) {\n          let accesstoken = ''\n          if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n            accesstoken = global_system_accesstoken\n          } else {\n            accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken\n          }\n          const url = global_system_data_url + '/flow/job/update?accesstoken=' + accesstoken\n          fetch(url, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json;charset=UTF-8'\n            },\n            body: JSON.stringify({\n              flowid: this.tableQuery.content,\n              sys: this.temp.sys,\n              job: this.temp.job,\n              timewindow: this.temp.timewindow,\n              retrycnt: this.temp.retrycnt,\n              alert: this.temp.alert,\n              timetrigger: this.temp.timetrigger,\n              jobtype: this.temp.jobtype,\n              frequency: this.temp.frequency,\n              checkbatstatus: this.temp.checkbatstatus,\n              priority: this.temp.priority,\n              runningcmd: this.temp.runningcmd,\n              enable: this.temp.enable,\n              status: this.temp.status\n            })\n          })\n            .then(response => response.json())\n            .then((responsedata) => {\n              this.dialogFormVisible = false\n              this.$notify({\n                title: 'Success',\n                message: 'Created Successfully',\n                type: 'success',\n                duration: 2000\n              })\n              this.getList()\n            })\n            .catch(function(err) {\n              console.log(err)\n              this.$notify({\n                title: 'Error',\n                message: 'Created Error',\n                type: 'error',\n                duration: 2000\n              })\n            })\n        }\n      })\n    },\n    handleDelete(row, index) {\n      let accesstoken = ''\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken\n      }\n      const url = global_system_data_url + '/image/rm?accesstoken=' + accesstoken\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n          imageid: row.imageid\n        })\n      })\n        .then(response => response.json())\n        .then((responsedata) => {\n          this.dialogFormVisible = false\n          this.$notify({\n            title: 'Success',\n            message: 'Delete Successfully',\n            type: 'success',\n            duration: 2000\n          })\n          this.tableQuery.pageData.splice(index, 1)\n        })\n        .catch(function(err) {\n          console.log(err)\n          this.$notify({\n            title: 'Error',\n            message: 'Delete Error',\n            type: 'error',\n            duration: 2000\n          })\n        })\n    },\n    getSortClass: function(key) {\n      const sort = this.tableQuery.sort\n      return sort === `+${key}` ? 'ascending' : 'descending'\n    }\n  }\n}\n",{"version":3,"sources":["flow-job-table.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"flow-job-table.vue","sourceRoot":"src/views/auto-flow-job","sourcesContent":["<template>\n  <div>\n    <sticky :z-index=\"10\" class-name=\"sub-navbar\">\n      <el-dropdown trigger=\"click\">\n        <el-button plain>\n          FlowId<i class=\"el-icon-caret-bottom el-icon--right\" />\n        </el-button>\n        <el-dropdown-menu slot=\"dropdown\" class=\"no-padding no-border\" style=\"width:300px\">\n          <el-input v-model=\"tableQuery.content\" placeholder=\"Please enter the content\">\n            <template slot=\"prepend\">\n              FlowId\n            </template>\n          </el-input>\n        </el-dropdown-menu>\n      </el-dropdown>\n\n      <el-button style=\"margin-left: 10px;\" type=\"success\" @click=\"getList\">\n        View\n      </el-button>\n    </sticky>\n    <div class=\"app-container\">\n      <div class=\"filter-container\">\n        <el-input v-model=\"tableQuery.title\" placeholder=\"Title\" style=\"width: 200px;\" class=\"filter-item\" @keyup.enter.native=\"handleFilter\" />\n        <el-button v-waves class=\"filter-item\" type=\"primary\" icon=\"el-icon-search\" @click=\"handleFilter\">\n          Search\n        </el-button>\n        <el-button class=\"filter-item\" style=\"margin-left: 10px;\" type=\"primary\" icon=\"el-icon-edit\" @click=\"handleCreate\">\n          Add\n        </el-button>\n      </div>\n\n      <el-table\n        :key=\"tableKey\"\n        v-loading=\"listLoading\"\n        :data=\"tableQuery.pageData\"\n        border\n        fit\n        highlight-current-row\n        style=\"width: 100%;\"\n        @sort-change=\"sortChange\"\n      >\n        <el-table-column label=\"Sys\" min-width=\"80px\">\n          <template slot-scope=\"{row}\">\n            <span>{{ row.sys }}</span>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"Job\" prop=\"job\" sortable=\"custom\" align=\"center\" width=\"300\" :class-name=\"getSortClass('+job')\" :sort-orders=\"['ascending', 'descending']\">\n          <template slot-scope=\"{row}\">\n            <span>{{ row.job }}</span>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"Enable\" min-width=\"80px\">\n          <template slot-scope=\"{row}\">\n            <span>{{ row.enable }}</span>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"Status\" min-width=\"80px\">\n          <template slot-scope=\"{row}\">\n            <el-tag :type=\"row.status | statusFilter\" :hit=\"false\" :effect=\"row.status | statusEffectFilter\">\n              {{ row.status }}\n            </el-tag>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"RunContext\" min-width=\"200px\">\n          <template slot-scope=\"{row}\">\n            <span>{{ row.runcontext }}</span>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"Server\" width=\"180px\" align=\"center\">\n          <template slot-scope=\"{row}\">\n            <span>{{ row.sserver }}</span>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"Ip\" min-width=\"150px\">\n          <template slot-scope=\"{row}\">\n            <span>{{ row.sip }}</span>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"Port\" min-width=\"80px\">\n          <template slot-scope=\"{row}\">\n            <span>{{ row.sport }}</span>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"StartTime\" min-width=\"160px\">\n          <template slot-scope=\"{row}\">\n            <span>{{ row.starttime }}</span>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"EndTime\" min-width=\"160px\">\n          <template slot-scope=\"{row}\">\n            <span>{{ row.endtime }}</span>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"TimeWindow\" width=\"80px\" align=\"center\">\n          <template slot-scope=\"{row}\">\n            <span>{{ row.timewindow }}</span>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"RetryCnt\" width=\"80px\" align=\"center\">\n          <template slot-scope=\"{row}\">\n            <span>{{ row.retrycnt }}</span>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"Alert\" width=\"80px\" align=\"center\">\n          <template slot-scope=\"{row}\">\n            <span>{{ row.alert }}</span>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"TimeTrigger\" width=\"80px\" align=\"center\">\n          <template slot-scope=\"{row}\">\n            <span>{{ row.timetrigger }}</span>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"JobType\" width=\"80px\" align=\"center\">\n          <template slot-scope=\"{row}\">\n            <span>{{ row.jobtype }}</span>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"Frequency\" width=\"80px\" align=\"center\">\n          <template slot-scope=\"{row}\">\n            <span>{{ row.frequency }}</span>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"CheckBatStatus\" width=\"80px\" align=\"center\">\n          <template slot-scope=\"{row}\">\n            <span>{{ row.checkbatstatus }}</span>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"Priority\" width=\"80px\" align=\"center\">\n          <template slot-scope=\"{row}\">\n            <span>{{ row.priority }}</span>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"RunningCmd\" width=\"80px\" align=\"center\">\n          <template slot-scope=\"{row}\">\n            <span>{{ row.runningcmd }}</span>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"Actions\" align=\"center\" width=\"230\" class-name=\"small-padding fixed-width\">\n          <template slot-scope=\"{row,$index}\">\n            <el-button type=\"primary\" size=\"mini\" @click=\"logListData(row)\">\n              Log\n            </el-button>\n            <el-button type=\"primary\" size=\"mini\" @click=\"handleUpdate(row)\">\n              Edit\n            </el-button>\n            <el-button v-if=\"row.status!='deleted'\" size=\"mini\" type=\"danger\" @click=\"handleDelete(row,$index)\">\n              Delete\n            </el-button>\n          </template>\n        </el-table-column>\n      </el-table>\n\n      <pagination v-show=\"tableQuery.total>0\" :total=\"tableQuery.total\" :layout=\"tableQuery.layout\" :page.sync=\"tableQuery.pageIndex\" :limit.sync=\"tableQuery.pageLimit\" :hidden=\"tableQuery.hidden\" :page-sizes=\"tableQuery.pageSizes\" @pagination=\"getList\" />\n\n      <el-dialog :title=\"textMap[dialogStatus]\" :visible.sync=\"dialogFormVisible\">\n        <el-form ref=\"dataForm\" :rules=\"rules\" :model=\"temp\" label-position=\"left\" label-width=\"100px\" style=\"margin-left:50px;\">\n          <el-form-item v-if=\"dialogStatus==='create'?true:false\" label=\"Sys\" prop=\"sys\">\n            <el-input v-model=\"temp.sys\" />\n          </el-form-item>\n          <el-form-item v-if=\"dialogStatus==='create'?true:false\" label=\"Job\" prop=\"job\">\n            <el-input v-model=\"temp.job\" />\n          </el-form-item>\n          <el-form-item v-if=\"dialogStatus==='create'?false:true\" label=\"Sys\" prop=\"sys\">\n            <span> {{ temp.sys }} </span>\n          </el-form-item>\n          <el-form-item v-if=\"dialogStatus==='create'?false:true\" label=\"Job\" prop=\"job\">\n            <span> {{ temp.job }} </span>\n          </el-form-item>\n          <el-form-item label=\"Enable\">\n            <el-select v-model=\"temp.enable\" class=\"filter-item\" placeholder=\"Please select\">\n              <el-option v-for=\"item in enableOptions\" :key=\"item.key\" :label=\"item.label\" :value=\"item.key\" />\n            </el-select>\n          </el-form-item>\n          <el-form-item label=\"Status\" prop=\"status\">\n            <el-select v-model=\"temp.status\" class=\"filter-item\" placeholder=\"Please select\">\n              <el-option v-for=\"item in statusOptions\" :key=\"item.key\" :label=\"item.label\" :value=\"item.key\" />\n            </el-select>\n          </el-form-item>\n          <el-form-item label=\"RunContext\" prop=\"runtime\">\n            <el-input v-model=\"temp.runcontext\" />\n          </el-form-item>\n          <el-form-item label=\"Server\" prop=\"server\">\n            <el-input v-model=\"temp.server\" />\n          </el-form-item>\n          <el-form-item label=\"Ip\" prop=\"ip\">\n            <el-input v-model=\"temp.ip\" />\n          </el-form-item>\n          <el-form-item label=\"Port\" prop=\"port\">\n            <el-input v-model=\"temp.port\" />\n          </el-form-item>\n          <el-form-item label=\"TimeWindow\">\n            <el-select v-model=\"temp.timewindow\" class=\"filter-item\" placeholder=\"Please select\">\n              <el-option v-for=\"item in timewindowOptions\" :key=\"item.key\" :label=\"item.label\" :value=\"item.key\" />\n            </el-select>\n          </el-form-item>\n          <el-form-item label=\"JobType\">\n            <el-select v-model=\"temp.jobtype\" class=\"filter-item\" placeholder=\"Please select\">\n              <el-option v-for=\"item in jobtypeOptions\" :key=\"item.key\" :label=\"item.label\" :value=\"item.key\" />\n            </el-select>\n          </el-form-item>\n          <el-form-item label=\"Frequency\">\n            <el-select v-model=\"temp.frequency\" class=\"filter-item\" placeholder=\"Please select\">\n              <el-option v-for=\"item in frequencyOptions\" :key=\"item.key\" :label=\"item.label\" :value=\"item.key\" />\n            </el-select>\n          </el-form-item>\n          <el-form-item label=\"CheckBatStatus\">\n            <el-select v-model=\"temp.checkbatstatus\" class=\"filter-item\" placeholder=\"Please select\">\n              <el-option v-for=\"item in checkbatstatusOptions\" :key=\"item.key\" :label=\"item.label\" :value=\"item.key\" />\n            </el-select>\n          </el-form-item>\n          <el-form-item label=\"Priority\">\n            <el-select v-model=\"temp.priority\" class=\"filter-item\" placeholder=\"Please select\">\n              <el-option v-for=\"item in priorityOptions\" :key=\"item.key\" :label=\"item.label\" :value=\"item.key\" />\n            </el-select>\n          </el-form-item>\n          <el-form-item label=\"RunningCmd\" prop=\"runningcmd\">\n            <el-input v-model=\"temp.runningcmd\" :autosize=\"{ minRows: 2, maxRows: 4}\" type=\"textarea\" placeholder=\"Please input\" />\n          </el-form-item>\n        </el-form>\n        <div slot=\"footer\" class=\"dialog-footer\">\n          <el-button @click=\"dialogFormVisible = false\">\n            Cancel\n          </el-button>\n          <el-button type=\"primary\" @click=\"dialogStatus==='create'?createData():updateData()\">\n            Confirm\n          </el-button>\n        </div>\n      </el-dialog>\n      <el-dialog :title=\"logTextMap[dialogStatus]\" :visible.sync=\"dialogLogOuterVisible\" width=\"90%\">\n        <el-dialog :title=\"logTextMap[dialogStatus]\" :visible.sync=\"dialogLogInnerVisible\" width=\"80%\" append-to-body>\n          <el-card shadow=\"never\" class=\"box-card-log\">\n            <pre> {{logtemp.logcontent}} </pre>\n          </el-card>\n          <div slot=\"footer\" class=\"dialog-footer\">\n            <el-button @click=\"dialogLogInnerVisible = false\">\n              Cancel\n            </el-button>\n            <el-button type=\"primary\" @click=\"logContentData\">\n              Confirm\n            </el-button>\n          </div>\n        </el-dialog>\n        <el-table\n          :key=\"tableKey\"\n          v-loading=\"listLoadingOuter\"\n          :data=\"logQuery.pageData\"\n          border\n          fit\n          highlight-current-row\n          style=\"width: 100%;\"\n          @sort-change=\"sortChange\"\n        >\n\t  <el-table-column label=\"Id\" min-width=\"300px\">\n            <template slot-scope=\"{row}\">\n              <span>{{ row.id }}</span>\n            </template>\n          </el-table-column>\n          <el-table-column label=\"Step\" min-width=\"80px\">\n            <template slot-scope=\"{row}\">\n              <span>{{ row.step }}</span>\n            </template>\n          </el-table-column>\n          <el-table-column label=\"WorkerId\" min-width=\"150px\">\n            <template slot-scope=\"{row}\">\n              <span>{{ row.sserver }}</span>\n            </template>\n          </el-table-column>\n          <el-table-column label=\"Ip\" min-width=\"150px\">\n            <template slot-scope=\"{row}\">\n              <span>{{ row.sip }}</span>\n            </template>\n          </el-table-column>\n          <el-table-column label=\"Port\" min-width=\"80px\">\n            <template slot-scope=\"{row}\">\n              <span>{{ row.sport }}</span>\n            </template>\n          </el-table-column>\n          <el-table-column label=\"StartTime\" min-width=\"180px\">\n            <template slot-scope=\"{row}\">\n              <span>{{ row.starttime }}</span>\n            </template>\n          </el-table-column>\n          <el-table-column label=\"EndTime\" min-width=\"180px\">\n            <template slot-scope=\"{row}\">\n              <span>{{ row.endtime }}</span>\n            </template>\n          </el-table-column>\n          <el-table-column label=\"ExitCode\" min-width=\"80px\">\n            <template slot-scope=\"{row}\">\n              <span>{{ row.exitcode }}</span>\n            </template>\n          </el-table-column>\n          <el-table-column label=\"Actions\" align=\"center\" width=\"150\" class-name=\"small-padding fixed-width\">\n            <template slot-scope=\"{row,$index}\">\n              <el-button type=\"primary\" size=\"mini\" @click=\"handleLog(row)\">\n                View\n              </el-button>\n            </template>\n          </el-table-column>\n        </el-table>\n        <div slot=\"footer\" class=\"dialog-footer\">\n          <el-button @click=\"dialogLogOuterVisible = false\">\n            Cancel\n          </el-button>\n        </div>\n      </el-dialog>\n    </div>\n  </div>\n</template>\n\n<script>\nimport waves from '@/directive/waves' // waves directive\nimport Pagination from '@/components/Pagination' // secondary package based on el-pagination\nimport defaultConfig from '@/config'\nimport Sticky from '@/components/Sticky'\n\nconst { global_system_accesstoken, global_system_data_url, global_system_storage_key } = defaultConfig\n\nexport default {\n  name: 'FlowJobTable',\n  components: { Pagination, Sticky },\n  directives: { waves },\n  filters: {\n    statusFilter(status) {\n      const statusMap = {\n        Succ: 'success',\n        Ready: 'info',\n        Pending: 'info',\n        Submit: 'info',\n        Go: 'info',\n        Fail: 'danger',\n        Stop: 'info',\n        Running: 'warning'\n      }\n      return statusMap[status]\n    },\n    statusEffectFilter(status) {\n      const statusEffectMap = {\n        Succ: 'dark',\n        Ready: 'plain',\n        Pending: 'light',\n        Submit: 'light',\n        Go: 'light',\n        Fail: 'dark',\n        Stop: 'plain',\n        Running: 'dark'\n      }\n      return statusEffectMap[status]\n    }\n  },\n  data() {\n    return {\n      tableKey: 0,\n      listLoading: false,\n      listLoadingOuter: false,\n      tableQuery: {\n        content: '',\n        title: '',\n        sort: '+imageid',\n        total: 0,\n        srcData: null,\n        pageSizes: [10],\n        pageIndex: 1,\n        pageData: null,\n        pageLimit: 10,\n        hidden: false,\n        layout: 'total, prev, pager, next, jumper'\n      },\n      logQuery: {\n        content: '',\n        title: '',\n        sort: '+imageid',\n        total: 0,\n        srcData: null,\n        pageSizes: [10],\n        pageIndex: 1,\n        pageData: null,\n        pageLimit: 10,\n        hidden: false,\n        layout: 'total, prev, pager, next, jumper'\n      },\n      sortOptions: [{ label: 'ID Ascending', key: '+imageid' }, { label: 'ID Descending', key: '-imageid' }],\n      enableOptions: [{ label: 'Enable', key: '1' }, { label: 'Disable', key: '0' }],\n      priorityOptions: [{ label: 'Priority-0', key: '0' }, { label: 'Priority-1', key: '1' }, { label: 'Priority-2', key: '2' }, { label: 'Priority-3', key: '3' }, { label: 'Priority-4', key: '4' }],\n      timewindowOptions: [{ label: 'Enable', key: '1' }, { label: 'Disable', key: '0' }],\n      jobtypeOptions: [{ label: 'Real', key: 'D' }, { label: 'Virtual', key: 'V' }],\n      frequencyOptions: [{ label: 'Day', key: 'D' }, { label: 'Month', key: 'M' }],\n      checkbatstatusOptions: [{ label: 'Enable', key: '1' }, { label: 'Disable', key: '0' }],\n      statusOptions: [{ label: 'Ready', key: 'Ready' }, { label: 'Pending', key: 'Pending' }, { label: 'Submit', key: 'Submit' }, { label: 'Go', key: 'Go' }, { label: 'Running', key: 'Running' }, { label: 'Succ', key: 'Succ' }, { label: 'Fail', key: 'Fail' }],\n      temp: {\n        sys: undefined,\n        job: '',\n        enable: '1',\n        status: '',\n        runcontext: '',\n        server: '',\n        ip: '',\n        port: '',\n        timewindow: '',\n        retrycnt: '',\n        alert: '',\n        timetrigger: '',\n        jobtype: '',\n        frequency: '',\n        checkbatstatus: '',\n        priority: '',\n        runningcmd: '',\n        logcontent: ''\n      },\n      logtemp: {\n        logcontent: '',\n        id: '',\n        sys: '',\n        job: ''\n      },\n      dialogFormVisible: false,\n      dialogLogOuterVisible: false,\n      dialogLogInnerVisible: false,\n      dialogStatus: '',\n      textMap: {\n        update: 'Edit',\n        create: 'Create'\n      },\n      logTextMap: {\n        view: 'View',\n        list: 'List'\n      },\n      rules: {\n        sys: [{ required: true, message: 'type is required', trigger: 'change' }]\n      }\n    }\n  },\n  created() {\n  },\n  methods: {\n    getList() {\n      if ((this.tableQuery.content).length === 0) {\n        return\n      }\n      this.listLoading = true\n      let accesstoken = ''\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken\n      }\n      const url = global_system_data_url + '/flow/job/ls?accesstoken=' + accesstoken\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n          flowid: this.tableQuery.content\n        })\n      })\n        .then(response => response.json())\n        .then((responsedata) => {\n          this.listLoading = false\n          if (responsedata.status_code !== 200) {\n            this.$notify({\n              title: 'Error',\n              message: responsedata.status_txt,\n              type: 'error',\n              duration: 2000\n            })\n            return\n          }\n          this.tableQuery.srcData = responsedata.data\n          this.tableQuery.total = (responsedata.data).length\n          this.tableQuery.pageSizes = []\n          for (var i = 1; i <= this.tableQuery.total / 10 + 1; i++) {\n            this.tableQuery.pageSizes.push(i * 10)\n          }\n          this.tableQuery.pageData = this.tableQuery.srcData.slice((this.tableQuery.pageIndex - 1) * this.tableQuery.pageLimit, (this.tableQuery.pageIndex) * this.tableQuery.pageLimit)\n          this.tableQuery.pageData = this.tableQuery.pageData.sort((a, b) => (a.length === b.length) ? a.job.localeCompare(b.job) : (a.job - b.job))\n        })\n        .catch(function(err) {\n          console.log(err)\n          this.listLoading = false\n        })\n    },\n    handleFilter() {\n      if ((this.tableQuery.title).length === 0) {\n        this.getList()\n        return\n      }\n      this.tableQuery.pageIndex = 1\n      var t_data = this.tableQuery.srcData\n      this.tableQuery.pageData = []\n      var j = 0\n      for (var k = 0; k < (t_data).length; k++) {\n        var t_dat = t_data[k]\n        for (var t_key in t_dat) {\n          if (t_dat[t_key] === null) {\n            continue\n          }\n          if (String(t_dat[t_key]).indexOf(this.tableQuery.title) !== -1) {\n            this.tableQuery.pageData[j] = t_data[k]\n            j++\n            break\n          }\n        }\n      }\n      this.tableQuery.total = (this.tableQuery.pageData).length\n      this.tableQuery.pageSizes = []\n      for (var i = 1; i <= this.tableQuery.total / 10 + 1; i++) {\n        this.tableQuery.pageSizes.push(i * 10)\n      }\n    },\n    sortChange(data) {\n      console.log(data)\n      const { prop, order } = data\n      if (prop === 'imageid') {\n        this.sortByID(order)\n      }\n    },\n    sortByID(order) {\n      if (order === null) {\n        this.tableQuery.sort = this.tableQuery.sort === '+imageid' ? '-imageid' : '+imageid'\n      } else if (order === 'ascending') {\n        this.tableQuery.sort = '+imageid'\n      } else {\n        this.tableQuery.sort = '-imageid'\n      }\n      if (this.tableQuery.sort === '+imageid') {\n        this.tableQuery.pageData = this.tableQuery.pageData.sort((a, b) => (a.length === b.length) ? b.imageid.localeCompare(a.imageid) : (b.imageid - a.imageid))\n      } else {\n        this.tableQuery.pageData = this.tableQuery.pageData.sort((a, b) => (a.length === b.length) ? a.imageid.localeCompare(b.imageid) : (a.imageid - b.imageid))\n      }\n    },\n    resetTemp() {\n      this.temp = {\n        tag: '',\n        dbstore: '',\n        enable: ''\n      }\n    },\n    handleCreate() {\n      this.resetTemp()\n      this.dialogStatus = 'create'\n      this.dialogFormVisible = true\n      this.$nextTick(() => {\n        this.$refs['dataForm'].clearValidate()\n      })\n    },\n    createData() {\n      this.$refs['dataForm'].validate((valid) => {\n        if (valid) {\n          let accesstoken = ''\n          if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n            accesstoken = global_system_accesstoken\n          } else {\n            accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken\n          }\n          const url = global_system_data_url + '/flow/job/add?accesstoken=' + accesstoken\n          fetch(url, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json;charset=UTF-8'\n            },\n            body: JSON.stringify({\n              flowid: this.tableQuery.content,\n              sys: this.temp.sys,\n              job: this.temp.job,\n              timewindow: this.temp.timewindow,\n              retrycnt: this.temp.retrycnt,\n              alert: this.temp.alert,\n              timetrigger: this.temp.timetrigger,\n              jobtype: this.temp.jobtype,\n              frequency: this.temp.frequency,\n              checkbatstatus: this.temp.checkbatstatus,\n              priority: this.temp.priority,\n              runningcmd: this.temp.runningcmd,\n              enable: this.temp.enable,\n              status: this.temp.status\n            })\n          })\n            .then(response => response.json())\n            .then((responsedata) => {\n              this.dialogFormVisible = false\n              this.$notify({\n                title: 'Success',\n                message: 'Created Successfully',\n                type: 'success',\n                duration: 2000\n              })\n              this.getList()\n            })\n            .catch(function(err) {\n              console.log(err)\n              this.$notify({\n                title: 'Error',\n                message: 'Created Error',\n                type: 'error',\n                duration: 2000\n              })\n            })\n        }\n      })\n    },\n    logListData(row) {\n      if ((this.tableQuery.content).length === 0) {\n        return\n      }\n      this.listLoadingOuter = true\n      this.dialogLogOuterVisible = true\n      var key = row.sys+\".\"+row.job\n      this.logTextMap.key = key\n      this.dialogStatus = 'key'\n      let accesstoken = ''\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken\n      }\n      const url = global_system_data_url + '/flow/job/log/ls?accesstoken=' + accesstoken\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n          flowid: this.tableQuery.content,\n          sys: row.sys,\n          job: row.job\n        })\n      })\n        .then(response => response.json())\n        .then((responsedata) => {\n          this.listLoadingOuter = false\n          if (responsedata.status_code !== 200) {\n            this.$notify({\n              title: 'Error',\n              message: responsedata.status_txt,\n              type: 'error',\n              duration: 2000\n            })\n            return\n          }\n          this.logQuery.pageData = responsedata.data\n          this.logQuery.pageData = this.logQuery.pageData.sort((a, b) => (a.length === b.length) ? b.starttime.localeCompare(a.starttime) : (b.starttime - a.starttime))\n        })\n        .catch(function(err) {\n          console.log(err)\n        })\n    }, \n    handleLog(row) {\n      this.logtemp = Object.assign({}, row) // copy obj\n      this.dialogLogInnerVisible = true\n      this.logtemp.logcontent = ''\n      var key = row.sys+\".\"+row.job\n      this.logTextMap.key = key\n      this.dialogStatus = 'key'\n      for (var i = 0; i < (row.content).length; i++) {\n        this.logtemp.logcontent += row.content[i]\n      }\n    },\n    logContentData() {\n      if ((this.tableQuery.content).length === 0) {\n        return\n      }\n      let accesstoken = ''\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken\n      }\n      const url = global_system_data_url + '/flow/job/log/get?accesstoken=' + accesstoken\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n          flowid: this.tableQuery.content,\n          id: this.logtemp.id\n        })\n      })\n        .then(response => response.json())\n        .then((responsedata) => {\n          if (responsedata.status_code !== 200) {\n            this.$notify({\n              title: 'Error',\n              message: responsedata.status_txt,\n              type: 'error',\n              duration: 2000\n            })\n            return\n          }\n          var tstr = ''\n          for (var i = 0; i < (responsedata.data[0].content).length; i++) {\n            tstr +=responsedata.data[0].content[i]\n          }\n          var tid = this.logtemp.id\n          this.logtemp = Object.assign({}, {id:tid,logcontent:tstr})\n        })\n        .catch(function(err) {\n          console.log(err)\n        })\n    },\n    handleUpdate(row) {\n      this.temp = Object.assign({}, row) // copy obj\n      this.dialogStatus = 'update'\n      this.dialogFormVisible = true\n      this.$nextTick(() => {\n        this.$refs['dataForm'].clearValidate()\n      })\n    },\n    updateData() {\n      this.$refs['dataForm'].validate((valid) => {\n        if (valid) {\n          let accesstoken = ''\n          if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n            accesstoken = global_system_accesstoken\n          } else {\n            accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken\n          }\n          const url = global_system_data_url + '/flow/job/update?accesstoken=' + accesstoken\n          fetch(url, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json;charset=UTF-8'\n            },\n            body: JSON.stringify({\n              flowid: this.tableQuery.content,\n              sys: this.temp.sys,\n              job: this.temp.job,\n              timewindow: this.temp.timewindow,\n              retrycnt: this.temp.retrycnt,\n              alert: this.temp.alert,\n              timetrigger: this.temp.timetrigger,\n              jobtype: this.temp.jobtype,\n              frequency: this.temp.frequency,\n              checkbatstatus: this.temp.checkbatstatus,\n              priority: this.temp.priority,\n              runningcmd: this.temp.runningcmd,\n              enable: this.temp.enable,\n              status: this.temp.status\n            })\n          })\n            .then(response => response.json())\n            .then((responsedata) => {\n              this.dialogFormVisible = false\n              this.$notify({\n                title: 'Success',\n                message: 'Created Successfully',\n                type: 'success',\n                duration: 2000\n              })\n              this.getList()\n            })\n            .catch(function(err) {\n              console.log(err)\n              this.$notify({\n                title: 'Error',\n                message: 'Created Error',\n                type: 'error',\n                duration: 2000\n              })\n            })\n        }\n      })\n    },\n    handleDelete(row, index) {\n      let accesstoken = ''\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken\n      }\n      const url = global_system_data_url + '/image/rm?accesstoken=' + accesstoken\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n          imageid: row.imageid\n        })\n      })\n        .then(response => response.json())\n        .then((responsedata) => {\n          this.dialogFormVisible = false\n          this.$notify({\n            title: 'Success',\n            message: 'Delete Successfully',\n            type: 'success',\n            duration: 2000\n          })\n          this.tableQuery.pageData.splice(index, 1)\n        })\n        .catch(function(err) {\n          console.log(err)\n          this.$notify({\n            title: 'Error',\n            message: 'Delete Error',\n            type: 'error',\n            duration: 2000\n          })\n        })\n    },\n    getSortClass: function(key) {\n      const sort = this.tableQuery.sort\n      return sort === `+${key}` ? 'ascending' : 'descending'\n    }\n  }\n}\n</script>\n\n<style scoped>\n.components-container div {\n  margin: 10px;\n}\n\n.time-container {\n  display: inline-block;\n}\n.box-card-log {\n    higth: 600px;\n}\n</style>\n"]}]}