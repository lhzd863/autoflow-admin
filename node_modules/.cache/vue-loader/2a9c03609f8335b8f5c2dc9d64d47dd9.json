{"remainingRequest":"/home/k8s/nodejs/autoflow-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/k8s/nodejs/autoflow-admin/src/views/auto-system/server-table.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/k8s/nodejs/autoflow-admin/src/views/auto-system/server-table.vue","mtime":1590250327928},{"path":"/home/k8s/nodejs/autoflow-admin/node_modules/cache-loader/dist/cjs.js","mtime":1588903989540},{"path":"/home/k8s/nodejs/autoflow-admin/node_modules/babel-loader/lib/index.js","mtime":1588861182369},{"path":"/home/k8s/nodejs/autoflow-admin/node_modules/cache-loader/dist/cjs.js","mtime":1588903989540},{"path":"/home/k8s/nodejs/autoflow-admin/node_modules/vue-loader/lib/index.js","mtime":1588861203543}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport waves from '@/directive/waves' // waves directive\nimport Pagination from '@/components/Pagination' // secondary package based on el-pagination\nimport defaultConfig from '@/config'\n\nconst { global_system_accesstoken, global_system_data_url, global_system_storage_key } = defaultConfig\n\nexport default {\n  name: 'ServerTable',\n  components: { Pagination },\n  directives: { waves },\n  filters: {\n    statusFilter(status) {\n      const statusMap = {\n        published: 'success',\n        draft: 'info',\n        deleted: 'danger'\n      }\n      return statusMap[status]\n    }\n  },\n  data() {\n    return {\n      tableKey: 0,\n      listLoading: true,\n      tableQuery: {\n        title: '',\n        sort: '+imageid',\n        total: 0,\n        srcData: null,\n        pageSizes: [10],\n        pageIndex: 1,\n        pageData: null,\n        pageLimit: 10,\n        hidden: false,\n        layout: 'total, prev, pager, next, jumper'\n      },\n      sortOptions: [{ label: 'ID Ascending', key: '+imageid' }, { label: 'ID Descending', key: '-imageid' }],\n      enableOptions: ['1', '0'],\n      temp: {\n        flowid: undefined,\n        processnum: '0',\n        imageid: undefined,\n        mstid: ''\n      },\n      dialogFormVisible: false,\n      dialogStatus: '',\n      textMap: {\n        update: 'Edit',\n        create: 'Create',\n        add: 'Routine Add',\n        sub: 'Routine Sub'\n      },\n      rules: {\n        flowid: [{ required: true, message: 'flowid is required', trigger: 'change' }],\n        mstid: [{ required: true, message: 'mstid is required', trigger: 'blur' }]\n      }\n    }\n  },\n  created() {\n    this.getList()\n  },\n  methods: {\n    getList() {\n      this.listLoading = true\n      this.resetQueryTable()\n      let accesstoken = ''\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken\n      }\n      const url = global_system_data_url + '/flow/routine/status?accesstoken=' + accesstoken\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n        })\n      })\n        .then(response => response.json())\n        .then((responsedata) => {\n          this.listLoading = false\n          if (responsedata.status_code !== 200) {\n            this.$notify({\n              title: 'Error',\n              message: responsedata.status_txt,\n              type: 'error',\n              duration: 2000\n            })\n            return\n          }\n          this.tableQuery.srcData = responsedata.data\n          this.tableQuery.total = (responsedata.data).length\n          this.tableQuery.pageSizes = []\n          for (var i = 1; i <= this.tableQuery.total / 10 + 1; i++) {\n            this.tableQuery.pageSizes.push(i * 10)\n          }\n          this.tableQuery.pageData = this.tableQuery.srcData.slice((this.tableQuery.pageIndex - 1) * this.tableQuery.pageLimit, (this.tableQuery.pageIndex) * this.tableQuery.pageLimit)\n        })\n        .catch(function(err) {\n          console.log(err)\n          this.listLoading = false\n        })\n    },\n    handleFilter() {\n      this.getList()\n      if ((this.tableQuery.title).length === 0) {\n        return\n      }\n      this.tableQuery.pageIndex = 1\n      var t_data = this.tableQuery.srcData\n      this.tableQuery.pageData = []\n      var j = 0\n      for (var k = 0; k < (t_data).length; k++) {\n        var t_dat1 = t_data[k]\n        for (var t_key in t_dat1) {\n          if (t_dat1[t_key] === null) {\n            continue\n          }\n          if (String(t_dat[t_key]).indexOf(this.tableQuery.title) !== -1) {\n            this.tableQuery.pageData[j] = t_data[k]\n            j++\n            break\n          }\n        }\n      }\n      this.tableQuery.total = (this.tableQuery.pageData).length\n      this.tableQuery.pageSizes = []\n      for (var i = 1; i <= this.tableQuery.total / 10 + 1; i++) {\n        this.tableQuery.pageSizes.push(i * 10)\n      }\n    },\n    sortChange(data) {\n      const { prop, order } = data\n      if (prop === 'ip') {\n        this.sortByIp(order)\n      } else if (prop === 'port') {\n        this.sortByPort(order)\n      }\n    },\n    sortByIp(order) {\n      if (order === null) {\n        this.tableQuery.sort = this.tableQuery.sort === '+ip' ? '-ip' : '+ip'\n      } else if (order === 'ascending') {\n        this.tableQuery.sort = '+ip'\n      } else {\n        this.tableQuery.sort = '-ip'\n      }\n      if (this.tableQuery.sort === '+ip') {\n        this.tableQuery.pageData = this.tableQuery.pageData.sort((a, b) => (a.length === b.length) ? b.ip.localeCompare(a.ip) : (b.ip - a.ip))\n      } else {\n        this.tableQuery.pageData = this.tableQuery.pageData.sort((a, b) => (a.length === b.length) ? a.ip.localeCompare(b.ip) : (a.ip - b.ip))\n      }\n    },\n    sortByPort(order) {\n      if (order === null) {\n        this.tableQuery.sort = this.tableQuery.sort === '+port' ? '-port' : '+port'\n      } else if (order === 'ascending') {\n        this.tableQuery.sort = '+port'\n      } else {\n        this.tableQuery.sort = '-port'\n      }\n      if (this.tableQuery.sort === '+port') {\n        this.tableQuery.pageData = this.tableQuery.pageData.sort((a, b) => (a.length === b.length) ? b.port.localeCompare(a.port) : (b.port - a.port))\n      } else {\n        this.tableQuery.pageData = this.tableQuery.pageData.sort((a, b) => (a.length === b.length) ? a.port.localeCompare(b.port) : (a.port - b.port))\n      }\n    },\n    resetTemp() {\n      this.temp = {\n        tag: '',\n        dbstore: '',\n        enable: ''\n      }\n    },\n    resetQueryTable(){\n      this.QueryTable = {\n        title: '',\n        sort: '+imageid',\n        total: 0,\n        srcData: null,\n        pageSizes: [10],\n        pageIndex: 1,\n        pageData: null,\n        pageLimit: 10,\n        hidden: false,\n        layout: 'total, prev, pager, next, jumper'\n      }\n    },\n    handleCreate() {\n      this.resetTemp()\n      this.dialogStatus = 'create'\n      this.dialogFormVisible = true\n      this.$nextTick(() => {\n        this.$refs['dataForm'].clearValidate()\n      })\n      this.temp.imageid = row.imageid\n    },\n    handleAdd(row) {\n      this.temp = Object.assign({}, row) // copy obj\n      this.dialogStatus = 'add'\n      this.dialogFormVisible = true\n      this.$nextTick(() => {\n        this.$refs['dataForm'].clearValidate()\n      })\n    },\n    handleSub(row) {\n      this.temp = Object.assign({}, row) // copy obj\n      this.dialogStatus = 'sub'\n      this.dialogFormVisible = true\n      this.$nextTick(() => {\n        this.$refs['dataForm'].clearValidate()\n      })\n    },\n    handleStop(row) {\n      this.$confirm('Confirm to stop instance?', 'Warning', {\n        confirmButtonText: 'Confirm',\n        cancelButtonText: 'Cancel',\n        type: 'warning'\n      })\n        .then(async() => {\n          this.instanceStop(row)\n        })\n        .catch(err => { console.error(err) })\n    },\n    instanceStop(row){\n      let accesstoken = ''\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken\n      }\n      this.listLoading = true\n      const url = global_system_data_url + '/instance/stop?accesstoken=' + accesstoken\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n          flowid: row.flowid\n        })\n      })\n        .then(response => response.json())\n        .then((responsedata) => {\n          this.listLoading = false\n          this.$notify({\n            title: 'Success',\n            message: '',\n            type: 'success',\n            duration: 2000\n          })\n          this.getList()\n        })\n        .catch(function(err) {\n          console.log(err)\n          this.listLoading = false\n          this.$notify({\n            title: 'Error',\n            message: responsedata.status_txt,\n            type: 'error',\n            duration: 2000\n          })\n          this.getList()\n        })\n    },\n    createData(){\n      let accesstoken = ''\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken\n      }\n      this.dialogFormVisible = false\n      this.listLoading = true\n      const url = global_system_data_url + '/instance/create?accesstoken=' + accesstoken\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n          imageid: this.temp.imageid,\n          processnum: this.temp.processnum\n        })\n      })\n        .then(response => response.json())\n        .then((responsedata) => {\n          this.listLoading = false\n          if (responsedata.status_code === 200) {\n            this.$notify({\n              title: 'Success',\n              message: 'Start Successfully',\n              type: 'success',\n              duration: 2000\n            })\n          } else {\n            this.$notify({\n              title: 'Error',\n              message: responsedata.status_txt,\n              type: 'warning',\n              duration: 2000\n            })\n          }\n          this.getList()\n        })\n        .catch(function(err) {\n          console.log(err)\n          this.listLoading = false\n          this.$notify({\n            title: 'Error',\n            message: responsedata.status_txt,\n            type: 'error',\n            duration: 2000\n          })\n          this.getList()\n        })\n    },\n    addData(){\n      let accesstoken = ''\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken\n      }\n      this.dialogFormVisible = false\n      this.listLoading = true\n      const url = global_system_data_url + '/flow/routine/add?accesstoken=' + accesstoken\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n          flowid: this.temp.flowid,\n          mstid: this.temp.mstid,\n          processnum: this.temp.processnum\n        })\n      })\n        .then(response => response.json())\n        .then((responsedata) => {\n          this.listLoading = false\n          if (responsedata.status_code === 200) {\n            this.$notify({\n              title: 'Success',\n              message: 'Start Successfully',\n              type: 'success',\n              duration: 2000\n            })\n          } else {\n            this.$notify({\n              title: 'Error',\n              message: responsedata.status_txt,\n              type: 'warning',\n              duration: 2000\n            })\n          }\n          this.getList()\n        })\n        .catch(function(err) {\n          console.log(err)\n          this.listLoading = false\n          this.$notify({\n            title: 'Error',\n            message: responsedata.status_txt,\n            type: 'error',\n            duration: 2000\n          })\n          this.getList()\n        })\n    },\n    subData(){\n      let accesstoken = ''\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken\n      }\n      this.dialogFormVisible = false\n      this.listLoading = true\n      const url = global_system_data_url + '/flow/routine/sub?accesstoken=' + accesstoken\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n          flowid: this.temp.flowid,\n          mstid: this.temp.mstid,\n          processnum: this.temp.processnum\n        })\n      })\n        .then(response => response.json())\n        .then((responsedata) => {\n          this.listLoading = false\n          if (responsedata.status_code === 200) {\n            this.$notify({\n              title: 'Success',\n              message: 'Start Successfully',\n              type: 'success',\n              duration: 2000\n            })\n          } else {\n            this.$notify({\n              title: 'Error',\n              message: responsedata.status_txt,\n              type: 'warning',\n              duration: 2000\n            })\n          }\n          this.getList()\n        })\n        .catch(function(err) {\n          console.log(err)\n          this.listLoading = false \n          this.$notify({\n            title: 'Error',\n            message: responsedata.status_txt,\n            type: 'error',\n            duration: 2000\n          })\n          this.getList()\n        })\n    },\n    getSortClass: function(key) {\n      const sort = this.tableQuery.sort\n      return sort === `+${key}` ? 'ascending' : 'descending'\n    }\n  }\n}\n",{"version":3,"sources":["server-table.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"server-table.vue","sourceRoot":"src/views/auto-system","sourcesContent":["<template>\n  <div class=\"app-container\">\n    <div class=\"filter-container\">\n      <el-input v-model=\"tableQuery.title\" placeholder=\"Title\" style=\"width: 200px;\" class=\"filter-item\" @keyup.enter.native=\"handleFilter\" />\n      <el-button v-waves class=\"filter-item\" type=\"primary\" icon=\"el-icon-search\" @click=\"handleFilter\">\n        Search\n      </el-button>\n      <el-button class=\"filter-item\" style=\"margin-left: 10px;\" type=\"primary\" icon=\"el-icon-edit\" @click=\"handleCreate\">\n        Create\n      </el-button>\n    </div>\n    <el-row :gutter=\"8\">\n      <el-col :xs=\"{span: 24}\" :sm=\"{span: 24}\" :md=\"{span: 24}\" :lg=\"{span: 24}\" :xl=\"{span: 24}\" style=\"padding-right:8px;margin-bottom:30px;\">\n        <el-table\n          :key=\"tableKey\"\n          v-loading=\"listLoading\"\n          :data=\"tableQuery.pageData\"\n          border\n          fit\n          highlight-current-row\n          style=\"width: 100%;\"\n          @sort-change=\"sortChange\"\n        >\n          <el-table-column label=\"Ip\" prop=\"ip\" sortable=\"custom\" align=\"center\" width=\"200\" :class-name=\"getSortClass('+ip')\" :sort-orders=\"['ascending', 'descending']\">\n            <template slot-scope=\"{row}\">\n              <span>{{ row.ip }}</span>\n            </template>\n          </el-table-column>\n          <el-table-column label=\"Port\" prop=\"port\" sortable=\"custom\" align=\"center\" width=\"100\" :class-name=\"getSortClass('+port')\" :sort-orders=\"['ascending', 'descending']\">\n            <template slot-scope=\"{row}\">\n              <span>{{ row.port }}</span>\n            </template>\n          </el-table-column>\n          <el-table-column label=\"FlowId\" width=\"200px\" align=\"center\">\n            <template slot-scope=\"{row}\">\n              <span>{{ row.flowid }}</span>\n            </template>\n          </el-table-column>\n          <el-table-column label=\"MstId\" max-width=\"200px\">\n            <template slot-scope=\"{row}\">\n              <span>{{ row.mstid }}</span>\n            </template>\n          </el-table-column>\n          <el-table-column label=\"WorkPoolStatus\" max-width=\"200px\">\n            <template slot-scope=\"{row}\">\n              <span>{{ row.workpoolstatus }}</span>\n            </template>\n          </el-table-column>\n          <el-table-column label=\"MyWorkCnt\" max-width=\"200px\">\n            <template slot-scope=\"{row}\">\n              <span>{{ row.myworkcnt }}</span>\n            </template>\n          </el-table-column>\n          <el-table-column label=\"Actions\" align=\"center\" width=\"300\" class-name=\"small-padding fixed-width\">\n            <template slot-scope=\"{row,$index}\">\n              <el-button type=\"primary\" icon=\"el-icon-circle-plus\" @click=\"handleAdd(row)\" circle>\n              </el-button>\n              <el-button type=\"primary\" icon=\"el-icon-remove\" @click=\"handleSub(row)\" circle>\n              </el-button>\n              <el-button size=\"mini\" type=\"danger\" @click=\"handleStop(row)\">\n                Stop\n              </el-button>\n            </template>\n          </el-table-column>\n        </el-table>\n\n        <pagination v-show=\"tableQuery.total>0\" :total=\"tableQuery.total\" :layout=\"tableQuery.layout\" :page.sync=\"tableQuery.pageIndex\" :limit.sync=\"tableQuery.pageLimit\" :hidden=\"tableQuery.hidden\" :page-sizes=\"tableQuery.pageSizes\" @pagination=\"getList\" />\n \n        <el-dialog :title=\"textMap[dialogStatus]\" :visible.sync=\"dialogFormVisible\">\n          <el-form ref=\"dataForm\" :rules=\"rules\" :model=\"temp\" label-position=\"left\" label-width=\"100px\" style=\"width: 400px; margin-left:50px;\">\n            <el-form-item v-if=\"dialogStatus==='create'?true:false\" label=\"ImageId\" prop=\"imageid\">\n              <el-input v-model=\"temp.imageid\" />\n            </el-form-item>\n            <el-form-item v-if=\"dialogStatus==='create'?false:true\" label=\"FlowId\" prop=\"flowid\">\n              <span> {{ temp.flowid }} </span>\n            </el-form-item>\n            <el-form-item v-if=\"dialogStatus==='create'?false:true\" label=\"MstId\" prop=\"mstid\">\n              <span> {{ temp.mstid }} </span>\n            </el-form-item>\n            <el-form-item label=\"ProcessNum\" prop=\"processnum\">\n              <el-input v-model=\"temp.processnum\" />\n            </el-form-item>\n          </el-form>\n          <div slot=\"footer\" class=\"dialog-footer\">\n            <el-button @click=\"dialogFormVisible = false\">\n              Cancel\n            </el-button>\n            <el-button type=\"primary\" @click=\"dialogStatus==='create'?createData():(dialogStatus==='add'?addData():subData())\">\n              Confirm\n            </el-button>\n          </div>\n        </el-dialog>\n\n      </el-col>\n    </el-row>\n\n  </div>\n</template>\n\n<script>\nimport waves from '@/directive/waves' // waves directive\nimport Pagination from '@/components/Pagination' // secondary package based on el-pagination\nimport defaultConfig from '@/config'\n\nconst { global_system_accesstoken, global_system_data_url, global_system_storage_key } = defaultConfig\n\nexport default {\n  name: 'ServerTable',\n  components: { Pagination },\n  directives: { waves },\n  filters: {\n    statusFilter(status) {\n      const statusMap = {\n        published: 'success',\n        draft: 'info',\n        deleted: 'danger'\n      }\n      return statusMap[status]\n    }\n  },\n  data() {\n    return {\n      tableKey: 0,\n      listLoading: true,\n      tableQuery: {\n        title: '',\n        sort: '+imageid',\n        total: 0,\n        srcData: null,\n        pageSizes: [10],\n        pageIndex: 1,\n        pageData: null,\n        pageLimit: 10,\n        hidden: false,\n        layout: 'total, prev, pager, next, jumper'\n      },\n      sortOptions: [{ label: 'ID Ascending', key: '+imageid' }, { label: 'ID Descending', key: '-imageid' }],\n      enableOptions: ['1', '0'],\n      temp: {\n        flowid: undefined,\n        processnum: '0',\n        imageid: undefined,\n        mstid: ''\n      },\n      dialogFormVisible: false,\n      dialogStatus: '',\n      textMap: {\n        update: 'Edit',\n        create: 'Create',\n        add: 'Routine Add',\n        sub: 'Routine Sub'\n      },\n      rules: {\n        flowid: [{ required: true, message: 'flowid is required', trigger: 'change' }],\n        mstid: [{ required: true, message: 'mstid is required', trigger: 'blur' }]\n      }\n    }\n  },\n  created() {\n    this.getList()\n  },\n  methods: {\n    getList() {\n      this.listLoading = true\n      this.resetQueryTable()\n      let accesstoken = ''\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken\n      }\n      const url = global_system_data_url + '/flow/routine/status?accesstoken=' + accesstoken\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n        })\n      })\n        .then(response => response.json())\n        .then((responsedata) => {\n          this.listLoading = false\n          if (responsedata.status_code !== 200) {\n            this.$notify({\n              title: 'Error',\n              message: responsedata.status_txt,\n              type: 'error',\n              duration: 2000\n            })\n            return\n          }\n          this.tableQuery.srcData = responsedata.data\n          this.tableQuery.total = (responsedata.data).length\n          this.tableQuery.pageSizes = []\n          for (var i = 1; i <= this.tableQuery.total / 10 + 1; i++) {\n            this.tableQuery.pageSizes.push(i * 10)\n          }\n          this.tableQuery.pageData = this.tableQuery.srcData.slice((this.tableQuery.pageIndex - 1) * this.tableQuery.pageLimit, (this.tableQuery.pageIndex) * this.tableQuery.pageLimit)\n        })\n        .catch(function(err) {\n          console.log(err)\n          this.listLoading = false\n        })\n    },\n    handleFilter() {\n      this.getList()\n      if ((this.tableQuery.title).length === 0) {\n        return\n      }\n      this.tableQuery.pageIndex = 1\n      var t_data = this.tableQuery.srcData\n      this.tableQuery.pageData = []\n      var j = 0\n      for (var k = 0; k < (t_data).length; k++) {\n        var t_dat1 = t_data[k]\n        for (var t_key in t_dat1) {\n          if (t_dat1[t_key] === null) {\n            continue\n          }\n          if (String(t_dat[t_key]).indexOf(this.tableQuery.title) !== -1) {\n            this.tableQuery.pageData[j] = t_data[k]\n            j++\n            break\n          }\n        }\n      }\n      this.tableQuery.total = (this.tableQuery.pageData).length\n      this.tableQuery.pageSizes = []\n      for (var i = 1; i <= this.tableQuery.total / 10 + 1; i++) {\n        this.tableQuery.pageSizes.push(i * 10)\n      }\n    },\n    sortChange(data) {\n      const { prop, order } = data\n      if (prop === 'ip') {\n        this.sortByIp(order)\n      } else if (prop === 'port') {\n        this.sortByPort(order)\n      }\n    },\n    sortByIp(order) {\n      if (order === null) {\n        this.tableQuery.sort = this.tableQuery.sort === '+ip' ? '-ip' : '+ip'\n      } else if (order === 'ascending') {\n        this.tableQuery.sort = '+ip'\n      } else {\n        this.tableQuery.sort = '-ip'\n      }\n      if (this.tableQuery.sort === '+ip') {\n        this.tableQuery.pageData = this.tableQuery.pageData.sort((a, b) => (a.length === b.length) ? b.ip.localeCompare(a.ip) : (b.ip - a.ip))\n      } else {\n        this.tableQuery.pageData = this.tableQuery.pageData.sort((a, b) => (a.length === b.length) ? a.ip.localeCompare(b.ip) : (a.ip - b.ip))\n      }\n    },\n    sortByPort(order) {\n      if (order === null) {\n        this.tableQuery.sort = this.tableQuery.sort === '+port' ? '-port' : '+port'\n      } else if (order === 'ascending') {\n        this.tableQuery.sort = '+port'\n      } else {\n        this.tableQuery.sort = '-port'\n      }\n      if (this.tableQuery.sort === '+port') {\n        this.tableQuery.pageData = this.tableQuery.pageData.sort((a, b) => (a.length === b.length) ? b.port.localeCompare(a.port) : (b.port - a.port))\n      } else {\n        this.tableQuery.pageData = this.tableQuery.pageData.sort((a, b) => (a.length === b.length) ? a.port.localeCompare(b.port) : (a.port - b.port))\n      }\n    },\n    resetTemp() {\n      this.temp = {\n        tag: '',\n        dbstore: '',\n        enable: ''\n      }\n    },\n    resetQueryTable(){\n      this.QueryTable = {\n        title: '',\n        sort: '+imageid',\n        total: 0,\n        srcData: null,\n        pageSizes: [10],\n        pageIndex: 1,\n        pageData: null,\n        pageLimit: 10,\n        hidden: false,\n        layout: 'total, prev, pager, next, jumper'\n      }\n    },\n    handleCreate() {\n      this.resetTemp()\n      this.dialogStatus = 'create'\n      this.dialogFormVisible = true\n      this.$nextTick(() => {\n        this.$refs['dataForm'].clearValidate()\n      })\n      this.temp.imageid = row.imageid\n    },\n    handleAdd(row) {\n      this.temp = Object.assign({}, row) // copy obj\n      this.dialogStatus = 'add'\n      this.dialogFormVisible = true\n      this.$nextTick(() => {\n        this.$refs['dataForm'].clearValidate()\n      })\n    },\n    handleSub(row) {\n      this.temp = Object.assign({}, row) // copy obj\n      this.dialogStatus = 'sub'\n      this.dialogFormVisible = true\n      this.$nextTick(() => {\n        this.$refs['dataForm'].clearValidate()\n      })\n    },\n    handleStop(row) {\n      this.$confirm('Confirm to stop instance?', 'Warning', {\n        confirmButtonText: 'Confirm',\n        cancelButtonText: 'Cancel',\n        type: 'warning'\n      })\n        .then(async() => {\n          this.instanceStop(row)\n        })\n        .catch(err => { console.error(err) })\n    },\n    instanceStop(row){\n      let accesstoken = ''\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken\n      }\n      this.listLoading = true\n      const url = global_system_data_url + '/instance/stop?accesstoken=' + accesstoken\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n          flowid: row.flowid\n        })\n      })\n        .then(response => response.json())\n        .then((responsedata) => {\n          this.listLoading = false\n          this.$notify({\n            title: 'Success',\n            message: '',\n            type: 'success',\n            duration: 2000\n          })\n          this.getList()\n        })\n        .catch(function(err) {\n          console.log(err)\n          this.listLoading = false\n          this.$notify({\n            title: 'Error',\n            message: responsedata.status_txt,\n            type: 'error',\n            duration: 2000\n          })\n          this.getList()\n        })\n    },\n    createData(){\n      let accesstoken = ''\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken\n      }\n      this.dialogFormVisible = false\n      this.listLoading = true\n      const url = global_system_data_url + '/instance/create?accesstoken=' + accesstoken\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n          imageid: this.temp.imageid,\n          processnum: this.temp.processnum\n        })\n      })\n        .then(response => response.json())\n        .then((responsedata) => {\n          this.listLoading = false\n          if (responsedata.status_code === 200) {\n            this.$notify({\n              title: 'Success',\n              message: 'Start Successfully',\n              type: 'success',\n              duration: 2000\n            })\n          } else {\n            this.$notify({\n              title: 'Error',\n              message: responsedata.status_txt,\n              type: 'warning',\n              duration: 2000\n            })\n          }\n          this.getList()\n        })\n        .catch(function(err) {\n          console.log(err)\n          this.listLoading = false\n          this.$notify({\n            title: 'Error',\n            message: responsedata.status_txt,\n            type: 'error',\n            duration: 2000\n          })\n          this.getList()\n        })\n    },\n    addData(){\n      let accesstoken = ''\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken\n      }\n      this.dialogFormVisible = false\n      this.listLoading = true\n      const url = global_system_data_url + '/flow/routine/add?accesstoken=' + accesstoken\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n          flowid: this.temp.flowid,\n          mstid: this.temp.mstid,\n          processnum: this.temp.processnum\n        })\n      })\n        .then(response => response.json())\n        .then((responsedata) => {\n          this.listLoading = false\n          if (responsedata.status_code === 200) {\n            this.$notify({\n              title: 'Success',\n              message: 'Start Successfully',\n              type: 'success',\n              duration: 2000\n            })\n          } else {\n            this.$notify({\n              title: 'Error',\n              message: responsedata.status_txt,\n              type: 'warning',\n              duration: 2000\n            })\n          }\n          this.getList()\n        })\n        .catch(function(err) {\n          console.log(err)\n          this.listLoading = false\n          this.$notify({\n            title: 'Error',\n            message: responsedata.status_txt,\n            type: 'error',\n            duration: 2000\n          })\n          this.getList()\n        })\n    },\n    subData(){\n      let accesstoken = ''\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken\n      }\n      this.dialogFormVisible = false\n      this.listLoading = true\n      const url = global_system_data_url + '/flow/routine/sub?accesstoken=' + accesstoken\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n          flowid: this.temp.flowid,\n          mstid: this.temp.mstid,\n          processnum: this.temp.processnum\n        })\n      })\n        .then(response => response.json())\n        .then((responsedata) => {\n          this.listLoading = false\n          if (responsedata.status_code === 200) {\n            this.$notify({\n              title: 'Success',\n              message: 'Start Successfully',\n              type: 'success',\n              duration: 2000\n            })\n          } else {\n            this.$notify({\n              title: 'Error',\n              message: responsedata.status_txt,\n              type: 'warning',\n              duration: 2000\n            })\n          }\n          this.getList()\n        })\n        .catch(function(err) {\n          console.log(err)\n          this.listLoading = false \n          this.$notify({\n            title: 'Error',\n            message: responsedata.status_txt,\n            type: 'error',\n            duration: 2000\n          })\n          this.getList()\n        })\n    },\n    getSortClass: function(key) {\n      const sort = this.tableQuery.sort\n      return sort === `+${key}` ? 'ascending' : 'descending'\n    }\n  }\n}\n</script>\n"]}]}