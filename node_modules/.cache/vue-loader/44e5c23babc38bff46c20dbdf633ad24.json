{"remainingRequest":"/home/k8s/nodejs/autoflow-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/k8s/nodejs/autoflow-admin/src/views/auto-image/instance-table.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/k8s/nodejs/autoflow-admin/src/views/auto-image/instance-table.vue","mtime":1590202817668},{"path":"/home/k8s/nodejs/autoflow-admin/node_modules/cache-loader/dist/cjs.js","mtime":1588903989540},{"path":"/home/k8s/nodejs/autoflow-admin/node_modules/babel-loader/lib/index.js","mtime":1588861182369},{"path":"/home/k8s/nodejs/autoflow-admin/node_modules/cache-loader/dist/cjs.js","mtime":1588903989540},{"path":"/home/k8s/nodejs/autoflow-admin/node_modules/vue-loader/lib/index.js","mtime":1588861203543}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport waves from '@/directive/waves' // waves directive\nimport Pagination from '@/components/Pagination' // secondary package based on el-pagination\nimport defaultConfig from '@/config'\n\nconst { global_system_accesstoken, global_system_data_url, global_system_storage_key } = defaultConfig\n\nexport default {\n  name: 'InstanceTable',\n  components: { Pagination },\n  directives: { waves },\n  filters: {\n    statusFilter(status) {\n      const statusMap = {\n        Done: 'success',\n        Ready: 'info',\n        Pending: 'info',\n        Submit: 'info',\n        Go: 'info',\n        Fail: 'danger',\n        Stop: 'info',\n        Running: 'warning'\n      }\n      return statusMap[status]\n    },\n    statusEffectFilter(status) {\n      const statusEffectMap = {\n        Done: 'dark',\n        Ready: 'plain',\n        Pending: 'light',\n        Submit: 'light',\n        Go: 'light',\n        Fail: 'dark',\n        Stop: 'plain',\n        Running: 'dark'\n      }\n      return statusEffectMap[status]\n    }\n  },\n  data() {\n    return {\n      tableKey: 0,\n      listLoading: true,\n      tableQuery: {\n        title: '',\n        sort: '+imageid',\n        total: 0,\n        srcData: null,\n        pageSizes: [10],\n        pageIndex: 1,\n        pageData: null,\n        pageLimit: 10,\n        hidden: false,\n        layout: 'total, prev, pager, next, jumper'\n      },\n      sortOptions: [{ label: 'ID Ascending', key: '+imageid' }, { label: 'ID Descending', key: '-imageid' }],\n      enableOptions: ['1', '0'],\n      processnumOptions: [{ label: 'routine-1', key: '1' }, { label: 'routine-2', key: '2' }, { label: 'routine-3', key: '3' }, { label: 'routine-4', key: '4' }, { label: 'routine-5', key: '5' }, { label: 'routine-6', key: '6' }, { label: 'routine-7', key: '7' }, { label: 'routine-8', key: '' }, { label: 'routine-9', key: '9' }],\n      temp: {\n        imageid: undefined,\n        flowid: '',\n        processnum: '1',\n        runcontext: '',\n        tag: '',\n        dbstore: '',\n        homedir: '',\n        enable: '1'\n      },\n      dialogFormVisible: false,\n      dialogFormVisibleEdit: false,\n      dialogStatus: '',\n      textMap: {\n        update: 'Edit',\n        create: 'Create'\n      },\n      rules: {\n        imageid: [{ required: true, message: 'imageid is required', trigger: 'change' }]\n      }\n    }\n  },\n  created() {\n    this.getList()\n  },\n  methods: {\n    getList() {\n      this.listLoading = true\n      let accesstoken = ''\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken\n      }\n      const url = global_system_data_url + '/instance/ls/status?accesstoken=' + accesstoken\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n        })\n      })\n        .then(response => response.json())\n        .then((responsedata) => {\n          this.listLoading = false\n          if (responsedata.status_code !== 200) {\n            this.$notify({\n              title: 'Error',\n              message: responsedata.status_txt,\n              type: 'error',\n              duration: 2000\n            })\n            return\n          }\n          this.tableQuery.srcData = responsedata.data\n          this.tableQuery.total = (responsedata.data).length\n          this.tableQuery.pageSizes = []\n          for (var i = 1; i <= this.tableQuery.total / 10 + 1; i++) {\n            this.tableQuery.pageSizes.push(i * 10)\n          }\n          this.tableQuery.pageData = this.tableQuery.srcData.slice((this.tableQuery.pageIndex - 1) * this.tableQuery.pageLimit, (this.tableQuery.pageIndex) * this.tableQuery.pageLimit)\n        })\n        .catch(function(err) {\n          console.log(err)\n          this.listLoading = false\n        })\n    },\n    handleFilter() {\n      if ((this.tableQuery.title).length === 0) {\n        this.getList()\n        return\n      }\n      this.tableQuery.pageIndex = 1\n      var t_data = this.tableQuery.srcData\n      this.tableQuery.pageData = []\n      var j = 0\n      for (var k = 0; k < (t_data).length; k++) {\n        var t_dat = t_data[k]\n        for (var t_key in t_dat) {\n          if (t_dat[t_key] === null) {\n            continue\n          }\n          if (String(t_dat[t_key]).indexOf(this.tableQuery.title) !== -1) {\n            this.tableQuery.pageData[j] = t_data[k]\n            j++\n            break\n          }\n        }\n      }\n      this.tableQuery.total = (this.tableQuery.pageData).length\n      this.tableQuery.pageSizes = []\n      for (var i = 1; i <= this.tableQuery.total / 10 + 1; i++) {\n        this.tableQuery.pageSizes.push(i * 10)\n      }\n    },\n    sortChange(data) {\n      console.log(data)\n      const { prop, order } = data\n      if (prop === 'imageid') {\n        this.sortByID(order)\n      }\n    },\n    sortByID(order) {\n      if (order === null) {\n        this.tableQuery.sort = this.tableQuery.sort === '+imageid' ? '-imageid' : '+imageid'\n      } else if (order === 'ascending') {\n        this.tableQuery.sort = '+imageid'\n      } else {\n        this.tableQuery.sort = '-imageid'\n      }\n      if (this.tableQuery.sort === '+imageid') {\n        this.tableQuery.pageData = this.tableQuery.pageData.sort((a, b) => (a.length === b.length) ? b.imageid.localeCompare(a.imageid) : (b.imageid - a.imageid))\n      } else {\n        this.tableQuery.pageData = this.tableQuery.pageData.sort((a, b) => (a.length === b.length) ? a.imageid.localeCompare(b.imageid) : (a.imageid - b.imageid))\n      }\n    },\n    resetTemp() {\n      this.temp = {\n        tag: '',\n        dbstore: '',\n        enable: ''\n      }\n    },\n    handleCreate() {\n      this.resetTemp()\n      this.dialogStatus = 'create'\n      this.dialogFormVisible = true\n      this.$nextTick(() => {\n        this.$refs['dataForm'].clearValidate()\n      })\n    },\n    createData() {\n      this.$refs['dataForm'].validate((valid) => {\n        if (valid) {\n          let accesstoken = ''\n          if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n            accesstoken = global_system_accesstoken\n          } else {\n            accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken\n          }\n          const url = global_system_data_url + '/instance/create?accesstoken=' + accesstoken\n          fetch(url, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json;charset=UTF-8'\n            },\n            body: JSON.stringify({\n              imageid: this.temp.imageid,\n              processnum: this.temp.processnum\n            })\n          })\n            .then(response => response.json())\n            .then((responsedata) => {\n              this.dialogFormVisible = false\n              if (responsedata.status_code === 200) {\n                this.$notify({\n                  title: 'Success',\n                  message: 'Start Successfully',\n                  type: 'success',\n                  duration: 2000\n                })\n              } else {\n                this.$notify({\n                  title: 'Error',\n                  message: responsedata.status_txt,\n                  type: 'warning',\n                  duration: 2000\n                })\n              }\n              this.getList()\n            })\n            .catch(function(err) {\n              console.log(err)\n              this.$notify({\n                title: 'Error',\n                message: 'Created Error',\n                type: 'error',\n                duration: 2000\n              })\n            })\n        }\n      })\n    },\n    handleStart(row) {\n      this.$confirm('Confirm to start instance?', 'Warning', {\n        confirmButtonText: 'Confirm',\n        cancelButtonText: 'Cancel',\n        type: 'warning'\n      })\n        .then(async() => {\n          this.instanceStart(row)\n        })\n        .catch(err => { console.error(err) })\n    },\n    instanceStart(row) {\n      let accesstoken = ''\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken\n      }\n      const url = global_system_data_url + '/instance/start?accesstoken=' + accesstoken\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n          flowid: row.flowid,\n          processnum: '1'\n        })\n      })\n        .then(response => response.json())\n        .then((responsedata) => {\n          this.dialogFormVisible = false\n          if (responsedata.status_code === 200) {\n            this.$notify({\n              title: 'Success',\n              message: 'Start Successfully',\n              type: 'success',\n              duration: 2000\n            })\n          } else {\n            this.$notify({\n              title: 'Error',\n              message: responsedata.status_txt,\n              type: 'warning',\n              duration: 2000\n            })\n          }\n          this.getList()\n        })\n        .catch(function(err) {\n          console.log(err)\n          this.$notify({\n            title: 'Error',\n            message: 'Start Error',\n            type: 'error',\n            duration: 2000\n          })\n        })\n    },\n    handleUpdate(row) {\n      this.temp = Object.assign({}, row)\n      this.dialogStatus = 'update'\n      this.dialogFormVisibleEdit = true\n      this.$nextTick(() => {\n        this.$refs['dataForm'].clearValidate()\n      })\n    },\n    updateData() {\n      let accesstoken = ''\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken\n      }\n      const url = global_system_data_url + '/flow/update?accesstoken=' + accesstoken\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n          flowid: this.temp.flowid,\n          dbstore: this.temp.dbstore,\n          homedir: this.temp.homedir,\n          runcontext: this.temp.runcontext,\n          enable: this.temp.enable\n        })\n      })\n        .then(response => response.json())\n        .then((responsedata) => {\n          this.dialogFormVisibleEdit = false\n          if (responsedata.status_code === 200) {\n            this.$notify({\n              title: 'Success',\n              message: 'Start Successfully',\n              type: 'success',\n              duration: 2000\n            })\n          } else {\n            this.$notify({\n              title: 'Error',\n              message: responsedata.status_txt,\n              type: 'warning',\n              duration: 2000\n            })\n          }\n          this.getList()\n        })\n        .catch(function(err) {\n          console.log(err)\n          this.$notify({\n            title: 'Error',\n            message: 'Start Error',\n            type: 'error',\n            duration: 2000\n          })\n        })\n    },\n    handleDelete(row) {\n      this.$confirm('Confirm to delete instance?', 'Warning', {\n        confirmButtonText: 'Confirm',\n        cancelButtonText: 'Cancel',\n        type: 'warning'\n      })\n        .then(async() => {\n          this.deleteData(row)\n        })\n        .catch(err => { console.error(err) })\n    },\n    deleteData(row) {\n      let accesstoken = ''\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken\n      }\n      const url = global_system_data_url + '/instance/rm?accesstoken=' + accesstoken\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n          flowid: row.flowid\n        })\n      })\n        .then(response => response.json())\n        .then((responsedata) => {\n          this.dialogFormVisible = false\n          if (responsedata.status_code === 200) {\n            this.$notify({\n              title: 'Success',\n              message: 'Start Successfully',\n              type: 'success',\n              duration: 2000\n            })\n          } else {\n            this.$notify({\n              title: 'Error',\n              message: responsedata.status_txt,\n              type: 'warning',\n              duration: 2000\n            })\n          }\n          this.getList()\n        })\n        .catch(function(err) {\n          console.log(err)\n          this.$notify({\n            title: 'Error',\n            message: 'Start Error',\n            type: 'error',\n            duration: 2000\n          })\n        })\n    },\n    handleStop(row) {\n      this.$confirm('Confirm to stop instance?', 'Warning', {\n        confirmButtonText: 'Confirm',\n        cancelButtonText: 'Cancel',\n        type: 'warning'\n      })\n        .then(async() => {\n          this.instanceStop(row)\n        })\n        .catch(err => { console.error(err) })\n    },\n    instanceStop(row) {\n      let accesstoken = ''\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken\n      }\n      const url = global_system_data_url + '/instance/stop?accesstoken=' + accesstoken\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n          flowid: row.flowid\n        })\n      })\n        .then(response => response.json())\n        .then((responsedata) => {\n          this.dialogFormVisible = false\n          if (responsedata.status_code === 200) {\n            this.$notify({\n              title: 'Success',\n              message: 'Stop Successfully',\n              type: 'success',\n              duration: 2000\n            })\n          } else {\n            this.$notify({\n              title: 'Error',\n              message: responsedata.status_txt,\n              type: 'warning',\n              duration: 2000\n            })\n          }\n          this.getList()\n        })\n        .catch(function(err) {\n          console.log(err)\n          this.$notify({\n            title: 'Error',\n            message: 'Stop Error',\n            type: 'error',\n            duration: 2000\n          })\n        })\n    },\n    getSortClass: function(key) {\n      const sort = this.tableQuery.sort\n      return sort === `+${key}` ? 'ascending' : 'descending'\n    }\n  }\n}\n",{"version":3,"sources":["instance-table.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0JA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"instance-table.vue","sourceRoot":"src/views/auto-image","sourcesContent":["<template>\n  <div class=\"app-container\">\n    <div class=\"filter-container\">\n      <el-input v-model=\"tableQuery.title\" placeholder=\"Title\" style=\"width: 200px;\" class=\"filter-item\" @keyup.enter.native=\"handleFilter\" />\n      <el-button v-waves class=\"filter-item\" type=\"primary\" icon=\"el-icon-search\" @click=\"handleFilter\">\n        Search\n      </el-button>\n      <el-button class=\"filter-item\" style=\"margin-left: 10px;\" type=\"primary\" icon=\"el-icon-edit\" @click=\"handleCreate\">\n        Create\n      </el-button>\n    </div>\n\n    <el-table\n      :key=\"tableKey\"\n      v-loading=\"listLoading\"\n      :data=\"tableQuery.pageData\"\n      border\n      fit\n      highlight-current-row\n      style=\"width: 100%;\"\n      @sort-change=\"sortChange\"\n    >\n      <el-table-column label=\"FlowId\" min-width=\"300px\" prop=\"flowid\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.flowid }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"ImageId\" min-width=\"300px\" prop=\"imageid\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.imageid }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"RunContext\" width=\"180px\" align=\"center\" prop=\"runcontext\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.runcontext }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"CreateTime\" width=\"180px\" align=\"center\" prop=\"createtime\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.createtime }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"StartTime\" width=\"180px\" align=\"center\" prop=\"starttime\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.starttime }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"EndTime\" width=\"180px\" align=\"center\" prop=\"endtime\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.endtime }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"Status\" width=\"100px\" align=\"center\" prop=\"status\">\n        <template slot-scope=\"{row}\">\n          <el-tag :type=\"row.status | statusFilter\" :hit=\"false\" :effect=\"row.status | statusEffectFilter\">\n            {{ row.status }}\n          </el-tag>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"DBStore\" min-width=\"300px\" prop=\"dbstore\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.dbstore }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"HomeDir\" width=\"300px\" align=\"center\" prop=\"homedir\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.homedir }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"Enable\" min-width=\"80px\" prop=\"enable\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.enable }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"User\" width=\"80px\" align=\"center\" prop=\"user\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.user }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"Actions\" align=\"center\" width=\"300\" class-name=\"small-padding fixed-width\">\n        <template slot-scope=\"{row}\">\n          <el-button type=\"primary\" size=\"mini\" @click=\"handleUpdate(row)\">\n            Edit\n          </el-button>\n          <el-button v-if=\"row.status!='deleted'\" size=\"mini\" type=\"danger\" @click=\"handleDelete(row)\">\n            Delete\n          </el-button>\n          <el-button type=\"primary\" size=\"mini\" @click=\"handleStart(row)\">\n            Start\n          </el-button>\n          <el-button v-if=\"row.status!='deleted'\" size=\"mini\" type=\"danger\" @click=\"handleStop(row)\">\n            Stop\n          </el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n\n    <pagination v-show=\"tableQuery.total>0\" :total=\"tableQuery.total\" :layout=\"tableQuery.layout\" :page.sync=\"tableQuery.pageIndex\" :limit.sync=\"tableQuery.pageLimit\" :hidden=\"tableQuery.hidden\" :page-sizes=\"tableQuery.pageSizes\" @pagination=\"getList\" />\n\n    <el-dialog :title=\"textMap[dialogStatus]\" :visible.sync=\"dialogFormVisible\">\n      <el-form ref=\"dataForm\" :rules=\"rules\" :model=\"temp\" label-position=\"left\" label-width=\"100px\" style=\"width: 400px; margin-left:50px;\">\n        <el-form-item label=\"ImageId\" prop=\"imageid\">\n          <el-input v-model=\"temp.imageid\" />\n        </el-form-item>\n        <el-form-item label=\"ProcessNum\" prop=\"processnum\">\n          <el-select v-model=\"temp.processnum\" class=\"filter-item\" placeholder=\"Please select\">\n            <el-option v-for=\"item in processnumOptions\" :key=\"item.key\" :label=\"item.label\" :value=\"item.key\" />\n          </el-select>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"dialogFormVisible = false\">\n          Cancel\n        </el-button>\n        <el-button type=\"primary\" @click=\"createData()\">\n          Confirm\n        </el-button>\n      </div>\n    </el-dialog>\n\n    <el-dialog :title=\"textMap[dialogStatus]\" :visible.sync=\"dialogFormVisibleEdit\">\n      <el-form ref=\"dataForm\" :rules=\"rules\" :model=\"temp\" label-position=\"left\" label-width=\"100px\" style=\"width: 400px; margin-left:50px;\">\n        <el-form-item label=\"FlowId\" prop=\"flowid\">\n          <span>{{ temp.flowid }}</span>\n        </el-form-item>\n        <el-form-item label=\"DBStore\">\n          <el-input v-model=\"temp.dbstore\" :autosize=\"{ minRows: 2, maxRows: 4}\" type=\"textarea\" placeholder=\"Please input\" />\n        </el-form-item>\n        <el-form-item label=\"HomeDir\">\n          <el-input v-model=\"temp.homedir\" :autosize=\"{ minRows: 2, maxRows: 4}\" type=\"textarea\" placeholder=\"Please input\" />\n        </el-form-item>\n        <el-form-item label=\"RunContext\" prop=\"runcontext\">\n          <el-input v-model=\"temp.runcontext\" />\n        </el-form-item>\n        <el-form-item label=\"Enable\" prop=\"enable\">\n          <el-select v-model=\"temp.enable\" class=\"filter-item\" placeholder=\"Please select\">\n            <el-option v-for=\"item in enableOptions\" :key=\"item.key\" :label=\"item.label\" :value=\"item.key\" />\n          </el-select>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"dialogFormVisibleEdit = false\">\n          Cancel\n        </el-button>\n        <el-button type=\"primary\" @click=\"updateData()\">\n          Confirm\n        </el-button>\n      </div>\n    </el-dialog>\n\n  </div>\n</template>\n\n<script>\nimport waves from '@/directive/waves' // waves directive\nimport Pagination from '@/components/Pagination' // secondary package based on el-pagination\nimport defaultConfig from '@/config'\n\nconst { global_system_accesstoken, global_system_data_url, global_system_storage_key } = defaultConfig\n\nexport default {\n  name: 'InstanceTable',\n  components: { Pagination },\n  directives: { waves },\n  filters: {\n    statusFilter(status) {\n      const statusMap = {\n        Done: 'success',\n        Ready: 'info',\n        Pending: 'info',\n        Submit: 'info',\n        Go: 'info',\n        Fail: 'danger',\n        Stop: 'info',\n        Running: 'warning'\n      }\n      return statusMap[status]\n    },\n    statusEffectFilter(status) {\n      const statusEffectMap = {\n        Done: 'dark',\n        Ready: 'plain',\n        Pending: 'light',\n        Submit: 'light',\n        Go: 'light',\n        Fail: 'dark',\n        Stop: 'plain',\n        Running: 'dark'\n      }\n      return statusEffectMap[status]\n    }\n  },\n  data() {\n    return {\n      tableKey: 0,\n      listLoading: true,\n      tableQuery: {\n        title: '',\n        sort: '+imageid',\n        total: 0,\n        srcData: null,\n        pageSizes: [10],\n        pageIndex: 1,\n        pageData: null,\n        pageLimit: 10,\n        hidden: false,\n        layout: 'total, prev, pager, next, jumper'\n      },\n      sortOptions: [{ label: 'ID Ascending', key: '+imageid' }, { label: 'ID Descending', key: '-imageid' }],\n      enableOptions: ['1', '0'],\n      processnumOptions: [{ label: 'routine-1', key: '1' }, { label: 'routine-2', key: '2' }, { label: 'routine-3', key: '3' }, { label: 'routine-4', key: '4' }, { label: 'routine-5', key: '5' }, { label: 'routine-6', key: '6' }, { label: 'routine-7', key: '7' }, { label: 'routine-8', key: '' }, { label: 'routine-9', key: '9' }],\n      temp: {\n        imageid: undefined,\n        flowid: '',\n        processnum: '1',\n        runcontext: '',\n        tag: '',\n        dbstore: '',\n        homedir: '',\n        enable: '1'\n      },\n      dialogFormVisible: false,\n      dialogFormVisibleEdit: false,\n      dialogStatus: '',\n      textMap: {\n        update: 'Edit',\n        create: 'Create'\n      },\n      rules: {\n        imageid: [{ required: true, message: 'imageid is required', trigger: 'change' }]\n      }\n    }\n  },\n  created() {\n    this.getList()\n  },\n  methods: {\n    getList() {\n      this.listLoading = true\n      let accesstoken = ''\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken\n      }\n      const url = global_system_data_url + '/instance/ls/status?accesstoken=' + accesstoken\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n        })\n      })\n        .then(response => response.json())\n        .then((responsedata) => {\n          this.listLoading = false\n          if (responsedata.status_code !== 200) {\n            this.$notify({\n              title: 'Error',\n              message: responsedata.status_txt,\n              type: 'error',\n              duration: 2000\n            })\n            return\n          }\n          this.tableQuery.srcData = responsedata.data\n          this.tableQuery.total = (responsedata.data).length\n          this.tableQuery.pageSizes = []\n          for (var i = 1; i <= this.tableQuery.total / 10 + 1; i++) {\n            this.tableQuery.pageSizes.push(i * 10)\n          }\n          this.tableQuery.pageData = this.tableQuery.srcData.slice((this.tableQuery.pageIndex - 1) * this.tableQuery.pageLimit, (this.tableQuery.pageIndex) * this.tableQuery.pageLimit)\n        })\n        .catch(function(err) {\n          console.log(err)\n          this.listLoading = false\n        })\n    },\n    handleFilter() {\n      if ((this.tableQuery.title).length === 0) {\n        this.getList()\n        return\n      }\n      this.tableQuery.pageIndex = 1\n      var t_data = this.tableQuery.srcData\n      this.tableQuery.pageData = []\n      var j = 0\n      for (var k = 0; k < (t_data).length; k++) {\n        var t_dat = t_data[k]\n        for (var t_key in t_dat) {\n          if (t_dat[t_key] === null) {\n            continue\n          }\n          if (String(t_dat[t_key]).indexOf(this.tableQuery.title) !== -1) {\n            this.tableQuery.pageData[j] = t_data[k]\n            j++\n            break\n          }\n        }\n      }\n      this.tableQuery.total = (this.tableQuery.pageData).length\n      this.tableQuery.pageSizes = []\n      for (var i = 1; i <= this.tableQuery.total / 10 + 1; i++) {\n        this.tableQuery.pageSizes.push(i * 10)\n      }\n    },\n    sortChange(data) {\n      console.log(data)\n      const { prop, order } = data\n      if (prop === 'imageid') {\n        this.sortByID(order)\n      }\n    },\n    sortByID(order) {\n      if (order === null) {\n        this.tableQuery.sort = this.tableQuery.sort === '+imageid' ? '-imageid' : '+imageid'\n      } else if (order === 'ascending') {\n        this.tableQuery.sort = '+imageid'\n      } else {\n        this.tableQuery.sort = '-imageid'\n      }\n      if (this.tableQuery.sort === '+imageid') {\n        this.tableQuery.pageData = this.tableQuery.pageData.sort((a, b) => (a.length === b.length) ? b.imageid.localeCompare(a.imageid) : (b.imageid - a.imageid))\n      } else {\n        this.tableQuery.pageData = this.tableQuery.pageData.sort((a, b) => (a.length === b.length) ? a.imageid.localeCompare(b.imageid) : (a.imageid - b.imageid))\n      }\n    },\n    resetTemp() {\n      this.temp = {\n        tag: '',\n        dbstore: '',\n        enable: ''\n      }\n    },\n    handleCreate() {\n      this.resetTemp()\n      this.dialogStatus = 'create'\n      this.dialogFormVisible = true\n      this.$nextTick(() => {\n        this.$refs['dataForm'].clearValidate()\n      })\n    },\n    createData() {\n      this.$refs['dataForm'].validate((valid) => {\n        if (valid) {\n          let accesstoken = ''\n          if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n            accesstoken = global_system_accesstoken\n          } else {\n            accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken\n          }\n          const url = global_system_data_url + '/instance/create?accesstoken=' + accesstoken\n          fetch(url, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json;charset=UTF-8'\n            },\n            body: JSON.stringify({\n              imageid: this.temp.imageid,\n              processnum: this.temp.processnum\n            })\n          })\n            .then(response => response.json())\n            .then((responsedata) => {\n              this.dialogFormVisible = false\n              if (responsedata.status_code === 200) {\n                this.$notify({\n                  title: 'Success',\n                  message: 'Start Successfully',\n                  type: 'success',\n                  duration: 2000\n                })\n              } else {\n                this.$notify({\n                  title: 'Error',\n                  message: responsedata.status_txt,\n                  type: 'warning',\n                  duration: 2000\n                })\n              }\n              this.getList()\n            })\n            .catch(function(err) {\n              console.log(err)\n              this.$notify({\n                title: 'Error',\n                message: 'Created Error',\n                type: 'error',\n                duration: 2000\n              })\n            })\n        }\n      })\n    },\n    handleStart(row) {\n      this.$confirm('Confirm to start instance?', 'Warning', {\n        confirmButtonText: 'Confirm',\n        cancelButtonText: 'Cancel',\n        type: 'warning'\n      })\n        .then(async() => {\n          this.instanceStart(row)\n        })\n        .catch(err => { console.error(err) })\n    },\n    instanceStart(row) {\n      let accesstoken = ''\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken\n      }\n      const url = global_system_data_url + '/instance/start?accesstoken=' + accesstoken\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n          flowid: row.flowid,\n          processnum: '1'\n        })\n      })\n        .then(response => response.json())\n        .then((responsedata) => {\n          this.dialogFormVisible = false\n          if (responsedata.status_code === 200) {\n            this.$notify({\n              title: 'Success',\n              message: 'Start Successfully',\n              type: 'success',\n              duration: 2000\n            })\n          } else {\n            this.$notify({\n              title: 'Error',\n              message: responsedata.status_txt,\n              type: 'warning',\n              duration: 2000\n            })\n          }\n          this.getList()\n        })\n        .catch(function(err) {\n          console.log(err)\n          this.$notify({\n            title: 'Error',\n            message: 'Start Error',\n            type: 'error',\n            duration: 2000\n          })\n        })\n    },\n    handleUpdate(row) {\n      this.temp = Object.assign({}, row)\n      this.dialogStatus = 'update'\n      this.dialogFormVisibleEdit = true\n      this.$nextTick(() => {\n        this.$refs['dataForm'].clearValidate()\n      })\n    },\n    updateData() {\n      let accesstoken = ''\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken\n      }\n      const url = global_system_data_url + '/flow/update?accesstoken=' + accesstoken\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n          flowid: this.temp.flowid,\n          dbstore: this.temp.dbstore,\n          homedir: this.temp.homedir,\n          runcontext: this.temp.runcontext,\n          enable: this.temp.enable\n        })\n      })\n        .then(response => response.json())\n        .then((responsedata) => {\n          this.dialogFormVisibleEdit = false\n          if (responsedata.status_code === 200) {\n            this.$notify({\n              title: 'Success',\n              message: 'Start Successfully',\n              type: 'success',\n              duration: 2000\n            })\n          } else {\n            this.$notify({\n              title: 'Error',\n              message: responsedata.status_txt,\n              type: 'warning',\n              duration: 2000\n            })\n          }\n          this.getList()\n        })\n        .catch(function(err) {\n          console.log(err)\n          this.$notify({\n            title: 'Error',\n            message: 'Start Error',\n            type: 'error',\n            duration: 2000\n          })\n        })\n    },\n    handleDelete(row) {\n      this.$confirm('Confirm to delete instance?', 'Warning', {\n        confirmButtonText: 'Confirm',\n        cancelButtonText: 'Cancel',\n        type: 'warning'\n      })\n        .then(async() => {\n          this.deleteData(row)\n        })\n        .catch(err => { console.error(err) })\n    },\n    deleteData(row) {\n      let accesstoken = ''\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken\n      }\n      const url = global_system_data_url + '/instance/rm?accesstoken=' + accesstoken\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n          flowid: row.flowid\n        })\n      })\n        .then(response => response.json())\n        .then((responsedata) => {\n          this.dialogFormVisible = false\n          if (responsedata.status_code === 200) {\n            this.$notify({\n              title: 'Success',\n              message: 'Start Successfully',\n              type: 'success',\n              duration: 2000\n            })\n          } else {\n            this.$notify({\n              title: 'Error',\n              message: responsedata.status_txt,\n              type: 'warning',\n              duration: 2000\n            })\n          }\n          this.getList()\n        })\n        .catch(function(err) {\n          console.log(err)\n          this.$notify({\n            title: 'Error',\n            message: 'Start Error',\n            type: 'error',\n            duration: 2000\n          })\n        })\n    },\n    handleStop(row) {\n      this.$confirm('Confirm to stop instance?', 'Warning', {\n        confirmButtonText: 'Confirm',\n        cancelButtonText: 'Cancel',\n        type: 'warning'\n      })\n        .then(async() => {\n          this.instanceStop(row)\n        })\n        .catch(err => { console.error(err) })\n    },\n    instanceStop(row) {\n      let accesstoken = ''\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken\n      }\n      const url = global_system_data_url + '/instance/stop?accesstoken=' + accesstoken\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n          flowid: row.flowid\n        })\n      })\n        .then(response => response.json())\n        .then((responsedata) => {\n          this.dialogFormVisible = false\n          if (responsedata.status_code === 200) {\n            this.$notify({\n              title: 'Success',\n              message: 'Stop Successfully',\n              type: 'success',\n              duration: 2000\n            })\n          } else {\n            this.$notify({\n              title: 'Error',\n              message: responsedata.status_txt,\n              type: 'warning',\n              duration: 2000\n            })\n          }\n          this.getList()\n        })\n        .catch(function(err) {\n          console.log(err)\n          this.$notify({\n            title: 'Error',\n            message: 'Stop Error',\n            type: 'error',\n            duration: 2000\n          })\n        })\n    },\n    getSortClass: function(key) {\n      const sort = this.tableQuery.sort\n      return sort === `+${key}` ? 'ascending' : 'descending'\n    }\n  }\n}\n</script>\n"]}]}