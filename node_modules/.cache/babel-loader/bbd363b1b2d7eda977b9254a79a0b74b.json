{"remainingRequest":"/home/k8s/nodejs/autoflow-admin/node_modules/babel-loader/lib/index.js!/home/k8s/nodejs/autoflow-admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/k8s/nodejs/autoflow-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/k8s/nodejs/autoflow-admin/src/views/auto-system/server-table.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/k8s/nodejs/autoflow-admin/src/views/auto-system/server-table.vue","mtime":1590250327928},{"path":"/home/k8s/nodejs/autoflow-admin/node_modules/cache-loader/dist/cjs.js","mtime":1588903989540},{"path":"/home/k8s/nodejs/autoflow-admin/node_modules/babel-loader/lib/index.js","mtime":1588861182369},{"path":"/home/k8s/nodejs/autoflow-admin/node_modules/cache-loader/dist/cjs.js","mtime":1588903989540},{"path":"/home/k8s/nodejs/autoflow-admin/node_modules/vue-loader/lib/index.js","mtime":1588861203543}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/home/k8s/nodejs/autoflow-admin/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"/home/k8s/nodejs/autoflow-admin/node_modules/@babel/runtime-corejs2/helpers/asyncToGenerator\"));\n\nrequire(\"core-js/modules/es6.array.sort\");\n\nvar _waves = _interopRequireDefault(require(\"@/directive/waves\"));\n\nvar _Pagination = _interopRequireDefault(require(\"@/components/Pagination\"));\n\nvar _config = _interopRequireDefault(require(\"@/config\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// waves directive\n// secondary package based on el-pagination\nvar global_system_accesstoken = _config.default.global_system_accesstoken,\n    global_system_data_url = _config.default.global_system_data_url,\n    global_system_storage_key = _config.default.global_system_storage_key;\nvar _default = {\n  name: 'ServerTable',\n  components: {\n    Pagination: _Pagination.default\n  },\n  directives: {\n    waves: _waves.default\n  },\n  filters: {\n    statusFilter: function statusFilter(status) {\n      var statusMap = {\n        published: 'success',\n        draft: 'info',\n        deleted: 'danger'\n      };\n      return statusMap[status];\n    }\n  },\n  data: function data() {\n    return {\n      tableKey: 0,\n      listLoading: true,\n      tableQuery: {\n        title: '',\n        sort: '+imageid',\n        total: 0,\n        srcData: null,\n        pageSizes: [10],\n        pageIndex: 1,\n        pageData: null,\n        pageLimit: 10,\n        hidden: false,\n        layout: 'total, prev, pager, next, jumper'\n      },\n      sortOptions: [{\n        label: 'ID Ascending',\n        key: '+imageid'\n      }, {\n        label: 'ID Descending',\n        key: '-imageid'\n      }],\n      enableOptions: ['1', '0'],\n      temp: {\n        flowid: undefined,\n        processnum: '0',\n        imageid: undefined,\n        mstid: ''\n      },\n      dialogFormVisible: false,\n      dialogStatus: '',\n      textMap: {\n        update: 'Edit',\n        create: 'Create',\n        add: 'Routine Add',\n        sub: 'Routine Sub'\n      },\n      rules: {\n        flowid: [{\n          required: true,\n          message: 'flowid is required',\n          trigger: 'change'\n        }],\n        mstid: [{\n          required: true,\n          message: 'mstid is required',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  created: function created() {\n    this.getList();\n  },\n  methods: {\n    getList: function getList() {\n      var _this = this;\n\n      this.listLoading = true;\n      this.resetQueryTable();\n      var accesstoken = '';\n\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken;\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken;\n      }\n\n      var url = global_system_data_url + '/flow/routine/status?accesstoken=' + accesstoken;\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({})\n      }).then(function (response) {\n        return response.json();\n      }).then(function (responsedata) {\n        _this.listLoading = false;\n\n        if (responsedata.status_code !== 200) {\n          _this.$notify({\n            title: 'Error',\n            message: responsedata.status_txt,\n            type: 'error',\n            duration: 2000\n          });\n\n          return;\n        }\n\n        _this.tableQuery.srcData = responsedata.data;\n        _this.tableQuery.total = responsedata.data.length;\n        _this.tableQuery.pageSizes = [];\n\n        for (var i = 1; i <= _this.tableQuery.total / 10 + 1; i++) {\n          _this.tableQuery.pageSizes.push(i * 10);\n        }\n\n        _this.tableQuery.pageData = _this.tableQuery.srcData.slice((_this.tableQuery.pageIndex - 1) * _this.tableQuery.pageLimit, _this.tableQuery.pageIndex * _this.tableQuery.pageLimit);\n      }).catch(function (err) {\n        console.log(err);\n        this.listLoading = false;\n      });\n    },\n    handleFilter: function handleFilter() {\n      this.getList();\n\n      if (this.tableQuery.title.length === 0) {\n        return;\n      }\n\n      this.tableQuery.pageIndex = 1;\n      var t_data = this.tableQuery.srcData;\n      this.tableQuery.pageData = [];\n      var j = 0;\n\n      for (var k = 0; k < t_data.length; k++) {\n        var t_dat1 = t_data[k];\n\n        for (var t_key in t_dat1) {\n          if (t_dat1[t_key] === null) {\n            continue;\n          }\n\n          if (String(t_dat[t_key]).indexOf(this.tableQuery.title) !== -1) {\n            this.tableQuery.pageData[j] = t_data[k];\n            j++;\n            break;\n          }\n        }\n      }\n\n      this.tableQuery.total = this.tableQuery.pageData.length;\n      this.tableQuery.pageSizes = [];\n\n      for (var i = 1; i <= this.tableQuery.total / 10 + 1; i++) {\n        this.tableQuery.pageSizes.push(i * 10);\n      }\n    },\n    sortChange: function sortChange(data) {\n      var prop = data.prop,\n          order = data.order;\n\n      if (prop === 'ip') {\n        this.sortByIp(order);\n      } else if (prop === 'port') {\n        this.sortByPort(order);\n      }\n    },\n    sortByIp: function sortByIp(order) {\n      if (order === null) {\n        this.tableQuery.sort = this.tableQuery.sort === '+ip' ? '-ip' : '+ip';\n      } else if (order === 'ascending') {\n        this.tableQuery.sort = '+ip';\n      } else {\n        this.tableQuery.sort = '-ip';\n      }\n\n      if (this.tableQuery.sort === '+ip') {\n        this.tableQuery.pageData = this.tableQuery.pageData.sort(function (a, b) {\n          return a.length === b.length ? b.ip.localeCompare(a.ip) : b.ip - a.ip;\n        });\n      } else {\n        this.tableQuery.pageData = this.tableQuery.pageData.sort(function (a, b) {\n          return a.length === b.length ? a.ip.localeCompare(b.ip) : a.ip - b.ip;\n        });\n      }\n    },\n    sortByPort: function sortByPort(order) {\n      if (order === null) {\n        this.tableQuery.sort = this.tableQuery.sort === '+port' ? '-port' : '+port';\n      } else if (order === 'ascending') {\n        this.tableQuery.sort = '+port';\n      } else {\n        this.tableQuery.sort = '-port';\n      }\n\n      if (this.tableQuery.sort === '+port') {\n        this.tableQuery.pageData = this.tableQuery.pageData.sort(function (a, b) {\n          return a.length === b.length ? b.port.localeCompare(a.port) : b.port - a.port;\n        });\n      } else {\n        this.tableQuery.pageData = this.tableQuery.pageData.sort(function (a, b) {\n          return a.length === b.length ? a.port.localeCompare(b.port) : a.port - b.port;\n        });\n      }\n    },\n    resetTemp: function resetTemp() {\n      this.temp = {\n        tag: '',\n        dbstore: '',\n        enable: ''\n      };\n    },\n    resetQueryTable: function resetQueryTable() {\n      this.QueryTable = {\n        title: '',\n        sort: '+imageid',\n        total: 0,\n        srcData: null,\n        pageSizes: [10],\n        pageIndex: 1,\n        pageData: null,\n        pageLimit: 10,\n        hidden: false,\n        layout: 'total, prev, pager, next, jumper'\n      };\n    },\n    handleCreate: function handleCreate() {\n      var _this2 = this;\n\n      this.resetTemp();\n      this.dialogStatus = 'create';\n      this.dialogFormVisible = true;\n      this.$nextTick(function () {\n        _this2.$refs['dataForm'].clearValidate();\n      });\n      this.temp.imageid = row.imageid;\n    },\n    handleAdd: function handleAdd(row) {\n      var _this3 = this;\n\n      this.temp = Object.assign({}, row); // copy obj\n\n      this.dialogStatus = 'add';\n      this.dialogFormVisible = true;\n      this.$nextTick(function () {\n        _this3.$refs['dataForm'].clearValidate();\n      });\n    },\n    handleSub: function handleSub(row) {\n      var _this4 = this;\n\n      this.temp = Object.assign({}, row); // copy obj\n\n      this.dialogStatus = 'sub';\n      this.dialogFormVisible = true;\n      this.$nextTick(function () {\n        _this4.$refs['dataForm'].clearValidate();\n      });\n    },\n    handleStop: function handleStop(row) {\n      var _this5 = this;\n\n      this.$confirm('Confirm to stop instance?', 'Warning', {\n        confirmButtonText: 'Confirm',\n        cancelButtonText: 'Cancel',\n        type: 'warning'\n      }).then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this5.instanceStop(row);\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))).catch(function (err) {\n        console.error(err);\n      });\n    },\n    instanceStop: function instanceStop(row) {\n      var _this6 = this;\n\n      var accesstoken = '';\n\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken;\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken;\n      }\n\n      this.listLoading = true;\n      var url = global_system_data_url + '/instance/stop?accesstoken=' + accesstoken;\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n          flowid: row.flowid\n        })\n      }).then(function (response) {\n        return response.json();\n      }).then(function (responsedata) {\n        _this6.listLoading = false;\n\n        _this6.$notify({\n          title: 'Success',\n          message: '',\n          type: 'success',\n          duration: 2000\n        });\n\n        _this6.getList();\n      }).catch(function (err) {\n        console.log(err);\n        this.listLoading = false;\n        this.$notify({\n          title: 'Error',\n          message: responsedata.status_txt,\n          type: 'error',\n          duration: 2000\n        });\n        this.getList();\n      });\n    },\n    createData: function createData() {\n      var _this7 = this;\n\n      var accesstoken = '';\n\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken;\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken;\n      }\n\n      this.dialogFormVisible = false;\n      this.listLoading = true;\n      var url = global_system_data_url + '/instance/create?accesstoken=' + accesstoken;\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n          imageid: this.temp.imageid,\n          processnum: this.temp.processnum\n        })\n      }).then(function (response) {\n        return response.json();\n      }).then(function (responsedata) {\n        _this7.listLoading = false;\n\n        if (responsedata.status_code === 200) {\n          _this7.$notify({\n            title: 'Success',\n            message: 'Start Successfully',\n            type: 'success',\n            duration: 2000\n          });\n        } else {\n          _this7.$notify({\n            title: 'Error',\n            message: responsedata.status_txt,\n            type: 'warning',\n            duration: 2000\n          });\n        }\n\n        _this7.getList();\n      }).catch(function (err) {\n        console.log(err);\n        this.listLoading = false;\n        this.$notify({\n          title: 'Error',\n          message: responsedata.status_txt,\n          type: 'error',\n          duration: 2000\n        });\n        this.getList();\n      });\n    },\n    addData: function addData() {\n      var _this8 = this;\n\n      var accesstoken = '';\n\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken;\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken;\n      }\n\n      this.dialogFormVisible = false;\n      this.listLoading = true;\n      var url = global_system_data_url + '/flow/routine/add?accesstoken=' + accesstoken;\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n          flowid: this.temp.flowid,\n          mstid: this.temp.mstid,\n          processnum: this.temp.processnum\n        })\n      }).then(function (response) {\n        return response.json();\n      }).then(function (responsedata) {\n        _this8.listLoading = false;\n\n        if (responsedata.status_code === 200) {\n          _this8.$notify({\n            title: 'Success',\n            message: 'Start Successfully',\n            type: 'success',\n            duration: 2000\n          });\n        } else {\n          _this8.$notify({\n            title: 'Error',\n            message: responsedata.status_txt,\n            type: 'warning',\n            duration: 2000\n          });\n        }\n\n        _this8.getList();\n      }).catch(function (err) {\n        console.log(err);\n        this.listLoading = false;\n        this.$notify({\n          title: 'Error',\n          message: responsedata.status_txt,\n          type: 'error',\n          duration: 2000\n        });\n        this.getList();\n      });\n    },\n    subData: function subData() {\n      var _this9 = this;\n\n      var accesstoken = '';\n\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken;\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken;\n      }\n\n      this.dialogFormVisible = false;\n      this.listLoading = true;\n      var url = global_system_data_url + '/flow/routine/sub?accesstoken=' + accesstoken;\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n          flowid: this.temp.flowid,\n          mstid: this.temp.mstid,\n          processnum: this.temp.processnum\n        })\n      }).then(function (response) {\n        return response.json();\n      }).then(function (responsedata) {\n        _this9.listLoading = false;\n\n        if (responsedata.status_code === 200) {\n          _this9.$notify({\n            title: 'Success',\n            message: 'Start Successfully',\n            type: 'success',\n            duration: 2000\n          });\n        } else {\n          _this9.$notify({\n            title: 'Error',\n            message: responsedata.status_txt,\n            type: 'warning',\n            duration: 2000\n          });\n        }\n\n        _this9.getList();\n      }).catch(function (err) {\n        console.log(err);\n        this.listLoading = false;\n        this.$notify({\n          title: 'Error',\n          message: responsedata.status_txt,\n          type: 'error',\n          duration: 2000\n        });\n        this.getList();\n      });\n    },\n    getSortClass: function getSortClass(key) {\n      var sort = this.tableQuery.sort;\n      return sort === \"+\".concat(key) ? 'ascending' : 'descending';\n    }\n  }\n};\nexports.default = _default;",{"version":3,"sources":["server-table.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"app-container\">\n    <div class=\"filter-container\">\n      <el-input v-model=\"tableQuery.title\" placeholder=\"Title\" style=\"width: 200px;\" class=\"filter-item\" @keyup.enter.native=\"handleFilter\" />\n      <el-button v-waves class=\"filter-item\" type=\"primary\" icon=\"el-icon-search\" @click=\"handleFilter\">\n        Search\n      </el-button>\n      <el-button class=\"filter-item\" style=\"margin-left: 10px;\" type=\"primary\" icon=\"el-icon-edit\" @click=\"handleCreate\">\n        Create\n      </el-button>\n    </div>\n    <el-row :gutter=\"8\">\n      <el-col :xs=\"{span: 24}\" :sm=\"{span: 24}\" :md=\"{span: 24}\" :lg=\"{span: 24}\" :xl=\"{span: 24}\" style=\"padding-right:8px;margin-bottom:30px;\">\n        <el-table\n          :key=\"tableKey\"\n          v-loading=\"listLoading\"\n          :data=\"tableQuery.pageData\"\n          border\n          fit\n          highlight-current-row\n          style=\"width: 100%;\"\n          @sort-change=\"sortChange\"\n        >\n          <el-table-column label=\"Ip\" prop=\"ip\" sortable=\"custom\" align=\"center\" width=\"200\" :class-name=\"getSortClass('+ip')\" :sort-orders=\"['ascending', 'descending']\">\n            <template slot-scope=\"{row}\">\n              <span>{{ row.ip }}</span>\n            </template>\n          </el-table-column>\n          <el-table-column label=\"Port\" prop=\"port\" sortable=\"custom\" align=\"center\" width=\"100\" :class-name=\"getSortClass('+port')\" :sort-orders=\"['ascending', 'descending']\">\n            <template slot-scope=\"{row}\">\n              <span>{{ row.port }}</span>\n            </template>\n          </el-table-column>\n          <el-table-column label=\"FlowId\" width=\"200px\" align=\"center\">\n            <template slot-scope=\"{row}\">\n              <span>{{ row.flowid }}</span>\n            </template>\n          </el-table-column>\n          <el-table-column label=\"MstId\" max-width=\"200px\">\n            <template slot-scope=\"{row}\">\n              <span>{{ row.mstid }}</span>\n            </template>\n          </el-table-column>\n          <el-table-column label=\"WorkPoolStatus\" max-width=\"200px\">\n            <template slot-scope=\"{row}\">\n              <span>{{ row.workpoolstatus }}</span>\n            </template>\n          </el-table-column>\n          <el-table-column label=\"MyWorkCnt\" max-width=\"200px\">\n            <template slot-scope=\"{row}\">\n              <span>{{ row.myworkcnt }}</span>\n            </template>\n          </el-table-column>\n          <el-table-column label=\"Actions\" align=\"center\" width=\"300\" class-name=\"small-padding fixed-width\">\n            <template slot-scope=\"{row,$index}\">\n              <el-button type=\"primary\" icon=\"el-icon-circle-plus\" @click=\"handleAdd(row)\" circle>\n              </el-button>\n              <el-button type=\"primary\" icon=\"el-icon-remove\" @click=\"handleSub(row)\" circle>\n              </el-button>\n              <el-button size=\"mini\" type=\"danger\" @click=\"handleStop(row)\">\n                Stop\n              </el-button>\n            </template>\n          </el-table-column>\n        </el-table>\n\n        <pagination v-show=\"tableQuery.total>0\" :total=\"tableQuery.total\" :layout=\"tableQuery.layout\" :page.sync=\"tableQuery.pageIndex\" :limit.sync=\"tableQuery.pageLimit\" :hidden=\"tableQuery.hidden\" :page-sizes=\"tableQuery.pageSizes\" @pagination=\"getList\" />\n \n        <el-dialog :title=\"textMap[dialogStatus]\" :visible.sync=\"dialogFormVisible\">\n          <el-form ref=\"dataForm\" :rules=\"rules\" :model=\"temp\" label-position=\"left\" label-width=\"100px\" style=\"width: 400px; margin-left:50px;\">\n            <el-form-item v-if=\"dialogStatus==='create'?true:false\" label=\"ImageId\" prop=\"imageid\">\n              <el-input v-model=\"temp.imageid\" />\n            </el-form-item>\n            <el-form-item v-if=\"dialogStatus==='create'?false:true\" label=\"FlowId\" prop=\"flowid\">\n              <span> {{ temp.flowid }} </span>\n            </el-form-item>\n            <el-form-item v-if=\"dialogStatus==='create'?false:true\" label=\"MstId\" prop=\"mstid\">\n              <span> {{ temp.mstid }} </span>\n            </el-form-item>\n            <el-form-item label=\"ProcessNum\" prop=\"processnum\">\n              <el-input v-model=\"temp.processnum\" />\n            </el-form-item>\n          </el-form>\n          <div slot=\"footer\" class=\"dialog-footer\">\n            <el-button @click=\"dialogFormVisible = false\">\n              Cancel\n            </el-button>\n            <el-button type=\"primary\" @click=\"dialogStatus==='create'?createData():(dialogStatus==='add'?addData():subData())\">\n              Confirm\n            </el-button>\n          </div>\n        </el-dialog>\n\n      </el-col>\n    </el-row>\n\n  </div>\n</template>\n\n<script>\nimport waves from '@/directive/waves' // waves directive\nimport Pagination from '@/components/Pagination' // secondary package based on el-pagination\nimport defaultConfig from '@/config'\n\nconst { global_system_accesstoken, global_system_data_url, global_system_storage_key } = defaultConfig\n\nexport default {\n  name: 'ServerTable',\n  components: { Pagination },\n  directives: { waves },\n  filters: {\n    statusFilter(status) {\n      const statusMap = {\n        published: 'success',\n        draft: 'info',\n        deleted: 'danger'\n      }\n      return statusMap[status]\n    }\n  },\n  data() {\n    return {\n      tableKey: 0,\n      listLoading: true,\n      tableQuery: {\n        title: '',\n        sort: '+imageid',\n        total: 0,\n        srcData: null,\n        pageSizes: [10],\n        pageIndex: 1,\n        pageData: null,\n        pageLimit: 10,\n        hidden: false,\n        layout: 'total, prev, pager, next, jumper'\n      },\n      sortOptions: [{ label: 'ID Ascending', key: '+imageid' }, { label: 'ID Descending', key: '-imageid' }],\n      enableOptions: ['1', '0'],\n      temp: {\n        flowid: undefined,\n        processnum: '0',\n        imageid: undefined,\n        mstid: ''\n      },\n      dialogFormVisible: false,\n      dialogStatus: '',\n      textMap: {\n        update: 'Edit',\n        create: 'Create',\n        add: 'Routine Add',\n        sub: 'Routine Sub'\n      },\n      rules: {\n        flowid: [{ required: true, message: 'flowid is required', trigger: 'change' }],\n        mstid: [{ required: true, message: 'mstid is required', trigger: 'blur' }]\n      }\n    }\n  },\n  created() {\n    this.getList()\n  },\n  methods: {\n    getList() {\n      this.listLoading = true\n      this.resetQueryTable()\n      let accesstoken = ''\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken\n      }\n      const url = global_system_data_url + '/flow/routine/status?accesstoken=' + accesstoken\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n        })\n      })\n        .then(response => response.json())\n        .then((responsedata) => {\n          this.listLoading = false\n          if (responsedata.status_code !== 200) {\n            this.$notify({\n              title: 'Error',\n              message: responsedata.status_txt,\n              type: 'error',\n              duration: 2000\n            })\n            return\n          }\n          this.tableQuery.srcData = responsedata.data\n          this.tableQuery.total = (responsedata.data).length\n          this.tableQuery.pageSizes = []\n          for (var i = 1; i <= this.tableQuery.total / 10 + 1; i++) {\n            this.tableQuery.pageSizes.push(i * 10)\n          }\n          this.tableQuery.pageData = this.tableQuery.srcData.slice((this.tableQuery.pageIndex - 1) * this.tableQuery.pageLimit, (this.tableQuery.pageIndex) * this.tableQuery.pageLimit)\n        })\n        .catch(function(err) {\n          console.log(err)\n          this.listLoading = false\n        })\n    },\n    handleFilter() {\n      this.getList()\n      if ((this.tableQuery.title).length === 0) {\n        return\n      }\n      this.tableQuery.pageIndex = 1\n      var t_data = this.tableQuery.srcData\n      this.tableQuery.pageData = []\n      var j = 0\n      for (var k = 0; k < (t_data).length; k++) {\n        var t_dat1 = t_data[k]\n        for (var t_key in t_dat1) {\n          if (t_dat1[t_key] === null) {\n            continue\n          }\n          if (String(t_dat[t_key]).indexOf(this.tableQuery.title) !== -1) {\n            this.tableQuery.pageData[j] = t_data[k]\n            j++\n            break\n          }\n        }\n      }\n      this.tableQuery.total = (this.tableQuery.pageData).length\n      this.tableQuery.pageSizes = []\n      for (var i = 1; i <= this.tableQuery.total / 10 + 1; i++) {\n        this.tableQuery.pageSizes.push(i * 10)\n      }\n    },\n    sortChange(data) {\n      const { prop, order } = data\n      if (prop === 'ip') {\n        this.sortByIp(order)\n      } else if (prop === 'port') {\n        this.sortByPort(order)\n      }\n    },\n    sortByIp(order) {\n      if (order === null) {\n        this.tableQuery.sort = this.tableQuery.sort === '+ip' ? '-ip' : '+ip'\n      } else if (order === 'ascending') {\n        this.tableQuery.sort = '+ip'\n      } else {\n        this.tableQuery.sort = '-ip'\n      }\n      if (this.tableQuery.sort === '+ip') {\n        this.tableQuery.pageData = this.tableQuery.pageData.sort((a, b) => (a.length === b.length) ? b.ip.localeCompare(a.ip) : (b.ip - a.ip))\n      } else {\n        this.tableQuery.pageData = this.tableQuery.pageData.sort((a, b) => (a.length === b.length) ? a.ip.localeCompare(b.ip) : (a.ip - b.ip))\n      }\n    },\n    sortByPort(order) {\n      if (order === null) {\n        this.tableQuery.sort = this.tableQuery.sort === '+port' ? '-port' : '+port'\n      } else if (order === 'ascending') {\n        this.tableQuery.sort = '+port'\n      } else {\n        this.tableQuery.sort = '-port'\n      }\n      if (this.tableQuery.sort === '+port') {\n        this.tableQuery.pageData = this.tableQuery.pageData.sort((a, b) => (a.length === b.length) ? b.port.localeCompare(a.port) : (b.port - a.port))\n      } else {\n        this.tableQuery.pageData = this.tableQuery.pageData.sort((a, b) => (a.length === b.length) ? a.port.localeCompare(b.port) : (a.port - b.port))\n      }\n    },\n    resetTemp() {\n      this.temp = {\n        tag: '',\n        dbstore: '',\n        enable: ''\n      }\n    },\n    resetQueryTable(){\n      this.QueryTable = {\n        title: '',\n        sort: '+imageid',\n        total: 0,\n        srcData: null,\n        pageSizes: [10],\n        pageIndex: 1,\n        pageData: null,\n        pageLimit: 10,\n        hidden: false,\n        layout: 'total, prev, pager, next, jumper'\n      }\n    },\n    handleCreate() {\n      this.resetTemp()\n      this.dialogStatus = 'create'\n      this.dialogFormVisible = true\n      this.$nextTick(() => {\n        this.$refs['dataForm'].clearValidate()\n      })\n      this.temp.imageid = row.imageid\n    },\n    handleAdd(row) {\n      this.temp = Object.assign({}, row) // copy obj\n      this.dialogStatus = 'add'\n      this.dialogFormVisible = true\n      this.$nextTick(() => {\n        this.$refs['dataForm'].clearValidate()\n      })\n    },\n    handleSub(row) {\n      this.temp = Object.assign({}, row) // copy obj\n      this.dialogStatus = 'sub'\n      this.dialogFormVisible = true\n      this.$nextTick(() => {\n        this.$refs['dataForm'].clearValidate()\n      })\n    },\n    handleStop(row) {\n      this.$confirm('Confirm to stop instance?', 'Warning', {\n        confirmButtonText: 'Confirm',\n        cancelButtonText: 'Cancel',\n        type: 'warning'\n      })\n        .then(async() => {\n          this.instanceStop(row)\n        })\n        .catch(err => { console.error(err) })\n    },\n    instanceStop(row){\n      let accesstoken = ''\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken\n      }\n      this.listLoading = true\n      const url = global_system_data_url + '/instance/stop?accesstoken=' + accesstoken\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n          flowid: row.flowid\n        })\n      })\n        .then(response => response.json())\n        .then((responsedata) => {\n          this.listLoading = false\n          this.$notify({\n            title: 'Success',\n            message: '',\n            type: 'success',\n            duration: 2000\n          })\n          this.getList()\n        })\n        .catch(function(err) {\n          console.log(err)\n          this.listLoading = false\n          this.$notify({\n            title: 'Error',\n            message: responsedata.status_txt,\n            type: 'error',\n            duration: 2000\n          })\n          this.getList()\n        })\n    },\n    createData(){\n      let accesstoken = ''\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken\n      }\n      this.dialogFormVisible = false\n      this.listLoading = true\n      const url = global_system_data_url + '/instance/create?accesstoken=' + accesstoken\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n          imageid: this.temp.imageid,\n          processnum: this.temp.processnum\n        })\n      })\n        .then(response => response.json())\n        .then((responsedata) => {\n          this.listLoading = false\n          if (responsedata.status_code === 200) {\n            this.$notify({\n              title: 'Success',\n              message: 'Start Successfully',\n              type: 'success',\n              duration: 2000\n            })\n          } else {\n            this.$notify({\n              title: 'Error',\n              message: responsedata.status_txt,\n              type: 'warning',\n              duration: 2000\n            })\n          }\n          this.getList()\n        })\n        .catch(function(err) {\n          console.log(err)\n          this.listLoading = false\n          this.$notify({\n            title: 'Error',\n            message: responsedata.status_txt,\n            type: 'error',\n            duration: 2000\n          })\n          this.getList()\n        })\n    },\n    addData(){\n      let accesstoken = ''\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken\n      }\n      this.dialogFormVisible = false\n      this.listLoading = true\n      const url = global_system_data_url + '/flow/routine/add?accesstoken=' + accesstoken\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n          flowid: this.temp.flowid,\n          mstid: this.temp.mstid,\n          processnum: this.temp.processnum\n        })\n      })\n        .then(response => response.json())\n        .then((responsedata) => {\n          this.listLoading = false\n          if (responsedata.status_code === 200) {\n            this.$notify({\n              title: 'Success',\n              message: 'Start Successfully',\n              type: 'success',\n              duration: 2000\n            })\n          } else {\n            this.$notify({\n              title: 'Error',\n              message: responsedata.status_txt,\n              type: 'warning',\n              duration: 2000\n            })\n          }\n          this.getList()\n        })\n        .catch(function(err) {\n          console.log(err)\n          this.listLoading = false\n          this.$notify({\n            title: 'Error',\n            message: responsedata.status_txt,\n            type: 'error',\n            duration: 2000\n          })\n          this.getList()\n        })\n    },\n    subData(){\n      let accesstoken = ''\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken\n      }\n      this.dialogFormVisible = false\n      this.listLoading = true\n      const url = global_system_data_url + '/flow/routine/sub?accesstoken=' + accesstoken\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n          flowid: this.temp.flowid,\n          mstid: this.temp.mstid,\n          processnum: this.temp.processnum\n        })\n      })\n        .then(response => response.json())\n        .then((responsedata) => {\n          this.listLoading = false\n          if (responsedata.status_code === 200) {\n            this.$notify({\n              title: 'Success',\n              message: 'Start Successfully',\n              type: 'success',\n              duration: 2000\n            })\n          } else {\n            this.$notify({\n              title: 'Error',\n              message: responsedata.status_txt,\n              type: 'warning',\n              duration: 2000\n            })\n          }\n          this.getList()\n        })\n        .catch(function(err) {\n          console.log(err)\n          this.listLoading = false \n          this.$notify({\n            title: 'Error',\n            message: responsedata.status_txt,\n            type: 'error',\n            duration: 2000\n          })\n          this.getList()\n        })\n    },\n    getSortClass: function(key) {\n      const sort = this.tableQuery.sort\n      return sort === `+${key}` ? 'ascending' : 'descending'\n    }\n  }\n}\n</script>\n"],"sourceRoot":"src/views/auto-system"}]}