{"remainingRequest":"/home/k8s/nodejs/autoflow-admin/node_modules/babel-loader/lib/index.js!/home/k8s/nodejs/autoflow-admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/k8s/nodejs/autoflow-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/k8s/nodejs/autoflow-admin/src/views/auto-image/instance-table.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/k8s/nodejs/autoflow-admin/src/views/auto-image/instance-table.vue","mtime":1590202817668},{"path":"/home/k8s/nodejs/autoflow-admin/node_modules/cache-loader/dist/cjs.js","mtime":1588903989540},{"path":"/home/k8s/nodejs/autoflow-admin/node_modules/babel-loader/lib/index.js","mtime":1588861182369},{"path":"/home/k8s/nodejs/autoflow-admin/node_modules/cache-loader/dist/cjs.js","mtime":1588903989540},{"path":"/home/k8s/nodejs/autoflow-admin/node_modules/vue-loader/lib/index.js","mtime":1588861203543}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/home/k8s/nodejs/autoflow-admin/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"/home/k8s/nodejs/autoflow-admin/node_modules/@babel/runtime-corejs2/helpers/asyncToGenerator\"));\n\nrequire(\"core-js/modules/es6.array.sort\");\n\nvar _waves = _interopRequireDefault(require(\"@/directive/waves\"));\n\nvar _Pagination = _interopRequireDefault(require(\"@/components/Pagination\"));\n\nvar _config = _interopRequireDefault(require(\"@/config\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// waves directive\n// secondary package based on el-pagination\nvar global_system_accesstoken = _config.default.global_system_accesstoken,\n    global_system_data_url = _config.default.global_system_data_url,\n    global_system_storage_key = _config.default.global_system_storage_key;\nvar _default = {\n  name: 'InstanceTable',\n  components: {\n    Pagination: _Pagination.default\n  },\n  directives: {\n    waves: _waves.default\n  },\n  filters: {\n    statusFilter: function statusFilter(status) {\n      var statusMap = {\n        Done: 'success',\n        Ready: 'info',\n        Pending: 'info',\n        Submit: 'info',\n        Go: 'info',\n        Fail: 'danger',\n        Stop: 'info',\n        Running: 'warning'\n      };\n      return statusMap[status];\n    },\n    statusEffectFilter: function statusEffectFilter(status) {\n      var statusEffectMap = {\n        Done: 'dark',\n        Ready: 'plain',\n        Pending: 'light',\n        Submit: 'light',\n        Go: 'light',\n        Fail: 'dark',\n        Stop: 'plain',\n        Running: 'dark'\n      };\n      return statusEffectMap[status];\n    }\n  },\n  data: function data() {\n    return {\n      tableKey: 0,\n      listLoading: true,\n      tableQuery: {\n        title: '',\n        sort: '+imageid',\n        total: 0,\n        srcData: null,\n        pageSizes: [10],\n        pageIndex: 1,\n        pageData: null,\n        pageLimit: 10,\n        hidden: false,\n        layout: 'total, prev, pager, next, jumper'\n      },\n      sortOptions: [{\n        label: 'ID Ascending',\n        key: '+imageid'\n      }, {\n        label: 'ID Descending',\n        key: '-imageid'\n      }],\n      enableOptions: ['1', '0'],\n      processnumOptions: [{\n        label: 'routine-1',\n        key: '1'\n      }, {\n        label: 'routine-2',\n        key: '2'\n      }, {\n        label: 'routine-3',\n        key: '3'\n      }, {\n        label: 'routine-4',\n        key: '4'\n      }, {\n        label: 'routine-5',\n        key: '5'\n      }, {\n        label: 'routine-6',\n        key: '6'\n      }, {\n        label: 'routine-7',\n        key: '7'\n      }, {\n        label: 'routine-8',\n        key: ''\n      }, {\n        label: 'routine-9',\n        key: '9'\n      }],\n      temp: {\n        imageid: undefined,\n        flowid: '',\n        processnum: '1',\n        runcontext: '',\n        tag: '',\n        dbstore: '',\n        homedir: '',\n        enable: '1'\n      },\n      dialogFormVisible: false,\n      dialogFormVisibleEdit: false,\n      dialogStatus: '',\n      textMap: {\n        update: 'Edit',\n        create: 'Create'\n      },\n      rules: {\n        imageid: [{\n          required: true,\n          message: 'imageid is required',\n          trigger: 'change'\n        }]\n      }\n    };\n  },\n  created: function created() {\n    this.getList();\n  },\n  methods: {\n    getList: function getList() {\n      var _this = this;\n\n      this.listLoading = true;\n      var accesstoken = '';\n\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken;\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken;\n      }\n\n      var url = global_system_data_url + '/instance/ls/status?accesstoken=' + accesstoken;\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({})\n      }).then(function (response) {\n        return response.json();\n      }).then(function (responsedata) {\n        _this.listLoading = false;\n\n        if (responsedata.status_code !== 200) {\n          _this.$notify({\n            title: 'Error',\n            message: responsedata.status_txt,\n            type: 'error',\n            duration: 2000\n          });\n\n          return;\n        }\n\n        _this.tableQuery.srcData = responsedata.data;\n        _this.tableQuery.total = responsedata.data.length;\n        _this.tableQuery.pageSizes = [];\n\n        for (var i = 1; i <= _this.tableQuery.total / 10 + 1; i++) {\n          _this.tableQuery.pageSizes.push(i * 10);\n        }\n\n        _this.tableQuery.pageData = _this.tableQuery.srcData.slice((_this.tableQuery.pageIndex - 1) * _this.tableQuery.pageLimit, _this.tableQuery.pageIndex * _this.tableQuery.pageLimit);\n      }).catch(function (err) {\n        console.log(err);\n        this.listLoading = false;\n      });\n    },\n    handleFilter: function handleFilter() {\n      if (this.tableQuery.title.length === 0) {\n        this.getList();\n        return;\n      }\n\n      this.tableQuery.pageIndex = 1;\n      var t_data = this.tableQuery.srcData;\n      this.tableQuery.pageData = [];\n      var j = 0;\n\n      for (var k = 0; k < t_data.length; k++) {\n        var t_dat = t_data[k];\n\n        for (var t_key in t_dat) {\n          if (t_dat[t_key] === null) {\n            continue;\n          }\n\n          if (String(t_dat[t_key]).indexOf(this.tableQuery.title) !== -1) {\n            this.tableQuery.pageData[j] = t_data[k];\n            j++;\n            break;\n          }\n        }\n      }\n\n      this.tableQuery.total = this.tableQuery.pageData.length;\n      this.tableQuery.pageSizes = [];\n\n      for (var i = 1; i <= this.tableQuery.total / 10 + 1; i++) {\n        this.tableQuery.pageSizes.push(i * 10);\n      }\n    },\n    sortChange: function sortChange(data) {\n      console.log(data);\n      var prop = data.prop,\n          order = data.order;\n\n      if (prop === 'imageid') {\n        this.sortByID(order);\n      }\n    },\n    sortByID: function sortByID(order) {\n      if (order === null) {\n        this.tableQuery.sort = this.tableQuery.sort === '+imageid' ? '-imageid' : '+imageid';\n      } else if (order === 'ascending') {\n        this.tableQuery.sort = '+imageid';\n      } else {\n        this.tableQuery.sort = '-imageid';\n      }\n\n      if (this.tableQuery.sort === '+imageid') {\n        this.tableQuery.pageData = this.tableQuery.pageData.sort(function (a, b) {\n          return a.length === b.length ? b.imageid.localeCompare(a.imageid) : b.imageid - a.imageid;\n        });\n      } else {\n        this.tableQuery.pageData = this.tableQuery.pageData.sort(function (a, b) {\n          return a.length === b.length ? a.imageid.localeCompare(b.imageid) : a.imageid - b.imageid;\n        });\n      }\n    },\n    resetTemp: function resetTemp() {\n      this.temp = {\n        tag: '',\n        dbstore: '',\n        enable: ''\n      };\n    },\n    handleCreate: function handleCreate() {\n      var _this2 = this;\n\n      this.resetTemp();\n      this.dialogStatus = 'create';\n      this.dialogFormVisible = true;\n      this.$nextTick(function () {\n        _this2.$refs['dataForm'].clearValidate();\n      });\n    },\n    createData: function createData() {\n      var _this3 = this;\n\n      this.$refs['dataForm'].validate(function (valid) {\n        if (valid) {\n          var accesstoken = '';\n\n          if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n            accesstoken = global_system_accesstoken;\n          } else {\n            accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken;\n          }\n\n          var url = global_system_data_url + '/instance/create?accesstoken=' + accesstoken;\n          fetch(url, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json;charset=UTF-8'\n            },\n            body: JSON.stringify({\n              imageid: _this3.temp.imageid,\n              processnum: _this3.temp.processnum\n            })\n          }).then(function (response) {\n            return response.json();\n          }).then(function (responsedata) {\n            _this3.dialogFormVisible = false;\n\n            if (responsedata.status_code === 200) {\n              _this3.$notify({\n                title: 'Success',\n                message: 'Start Successfully',\n                type: 'success',\n                duration: 2000\n              });\n            } else {\n              _this3.$notify({\n                title: 'Error',\n                message: responsedata.status_txt,\n                type: 'warning',\n                duration: 2000\n              });\n            }\n\n            _this3.getList();\n          }).catch(function (err) {\n            console.log(err);\n            this.$notify({\n              title: 'Error',\n              message: 'Created Error',\n              type: 'error',\n              duration: 2000\n            });\n          });\n        }\n      });\n    },\n    handleStart: function handleStart(row) {\n      var _this4 = this;\n\n      this.$confirm('Confirm to start instance?', 'Warning', {\n        confirmButtonText: 'Confirm',\n        cancelButtonText: 'Cancel',\n        type: 'warning'\n      }).then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this4.instanceStart(row);\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))).catch(function (err) {\n        console.error(err);\n      });\n    },\n    instanceStart: function instanceStart(row) {\n      var _this5 = this;\n\n      var accesstoken = '';\n\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken;\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken;\n      }\n\n      var url = global_system_data_url + '/instance/start?accesstoken=' + accesstoken;\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n          flowid: row.flowid,\n          processnum: '1'\n        })\n      }).then(function (response) {\n        return response.json();\n      }).then(function (responsedata) {\n        _this5.dialogFormVisible = false;\n\n        if (responsedata.status_code === 200) {\n          _this5.$notify({\n            title: 'Success',\n            message: 'Start Successfully',\n            type: 'success',\n            duration: 2000\n          });\n        } else {\n          _this5.$notify({\n            title: 'Error',\n            message: responsedata.status_txt,\n            type: 'warning',\n            duration: 2000\n          });\n        }\n\n        _this5.getList();\n      }).catch(function (err) {\n        console.log(err);\n        this.$notify({\n          title: 'Error',\n          message: 'Start Error',\n          type: 'error',\n          duration: 2000\n        });\n      });\n    },\n    handleUpdate: function handleUpdate(row) {\n      var _this6 = this;\n\n      this.temp = Object.assign({}, row);\n      this.dialogStatus = 'update';\n      this.dialogFormVisibleEdit = true;\n      this.$nextTick(function () {\n        _this6.$refs['dataForm'].clearValidate();\n      });\n    },\n    updateData: function updateData() {\n      var _this7 = this;\n\n      var accesstoken = '';\n\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken;\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken;\n      }\n\n      var url = global_system_data_url + '/flow/update?accesstoken=' + accesstoken;\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n          flowid: this.temp.flowid,\n          dbstore: this.temp.dbstore,\n          homedir: this.temp.homedir,\n          runcontext: this.temp.runcontext,\n          enable: this.temp.enable\n        })\n      }).then(function (response) {\n        return response.json();\n      }).then(function (responsedata) {\n        _this7.dialogFormVisibleEdit = false;\n\n        if (responsedata.status_code === 200) {\n          _this7.$notify({\n            title: 'Success',\n            message: 'Start Successfully',\n            type: 'success',\n            duration: 2000\n          });\n        } else {\n          _this7.$notify({\n            title: 'Error',\n            message: responsedata.status_txt,\n            type: 'warning',\n            duration: 2000\n          });\n        }\n\n        _this7.getList();\n      }).catch(function (err) {\n        console.log(err);\n        this.$notify({\n          title: 'Error',\n          message: 'Start Error',\n          type: 'error',\n          duration: 2000\n        });\n      });\n    },\n    handleDelete: function handleDelete(row) {\n      var _this8 = this;\n\n      this.$confirm('Confirm to delete instance?', 'Warning', {\n        confirmButtonText: 'Confirm',\n        cancelButtonText: 'Cancel',\n        type: 'warning'\n      }).then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _this8.deleteData(row);\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))).catch(function (err) {\n        console.error(err);\n      });\n    },\n    deleteData: function deleteData(row) {\n      var _this9 = this;\n\n      var accesstoken = '';\n\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken;\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken;\n      }\n\n      var url = global_system_data_url + '/instance/rm?accesstoken=' + accesstoken;\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n          flowid: row.flowid\n        })\n      }).then(function (response) {\n        return response.json();\n      }).then(function (responsedata) {\n        _this9.dialogFormVisible = false;\n\n        if (responsedata.status_code === 200) {\n          _this9.$notify({\n            title: 'Success',\n            message: 'Start Successfully',\n            type: 'success',\n            duration: 2000\n          });\n        } else {\n          _this9.$notify({\n            title: 'Error',\n            message: responsedata.status_txt,\n            type: 'warning',\n            duration: 2000\n          });\n        }\n\n        _this9.getList();\n      }).catch(function (err) {\n        console.log(err);\n        this.$notify({\n          title: 'Error',\n          message: 'Start Error',\n          type: 'error',\n          duration: 2000\n        });\n      });\n    },\n    handleStop: function handleStop(row) {\n      var _this10 = this;\n\n      this.$confirm('Confirm to stop instance?', 'Warning', {\n        confirmButtonText: 'Confirm',\n        cancelButtonText: 'Cancel',\n        type: 'warning'\n      }).then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _this10.instanceStop(row);\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))).catch(function (err) {\n        console.error(err);\n      });\n    },\n    instanceStop: function instanceStop(row) {\n      var _this11 = this;\n\n      var accesstoken = '';\n\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken;\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken;\n      }\n\n      var url = global_system_data_url + '/instance/stop?accesstoken=' + accesstoken;\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n          flowid: row.flowid\n        })\n      }).then(function (response) {\n        return response.json();\n      }).then(function (responsedata) {\n        _this11.dialogFormVisible = false;\n\n        if (responsedata.status_code === 200) {\n          _this11.$notify({\n            title: 'Success',\n            message: 'Stop Successfully',\n            type: 'success',\n            duration: 2000\n          });\n        } else {\n          _this11.$notify({\n            title: 'Error',\n            message: responsedata.status_txt,\n            type: 'warning',\n            duration: 2000\n          });\n        }\n\n        _this11.getList();\n      }).catch(function (err) {\n        console.log(err);\n        this.$notify({\n          title: 'Error',\n          message: 'Stop Error',\n          type: 'error',\n          duration: 2000\n        });\n      });\n    },\n    getSortClass: function getSortClass(key) {\n      var sort = this.tableQuery.sort;\n      return sort === \"+\".concat(key) ? 'ascending' : 'descending';\n    }\n  }\n};\nexports.default = _default;",{"version":3,"sources":["instance-table.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"app-container\">\n    <div class=\"filter-container\">\n      <el-input v-model=\"tableQuery.title\" placeholder=\"Title\" style=\"width: 200px;\" class=\"filter-item\" @keyup.enter.native=\"handleFilter\" />\n      <el-button v-waves class=\"filter-item\" type=\"primary\" icon=\"el-icon-search\" @click=\"handleFilter\">\n        Search\n      </el-button>\n      <el-button class=\"filter-item\" style=\"margin-left: 10px;\" type=\"primary\" icon=\"el-icon-edit\" @click=\"handleCreate\">\n        Create\n      </el-button>\n    </div>\n\n    <el-table\n      :key=\"tableKey\"\n      v-loading=\"listLoading\"\n      :data=\"tableQuery.pageData\"\n      border\n      fit\n      highlight-current-row\n      style=\"width: 100%;\"\n      @sort-change=\"sortChange\"\n    >\n      <el-table-column label=\"FlowId\" min-width=\"300px\" prop=\"flowid\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.flowid }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"ImageId\" min-width=\"300px\" prop=\"imageid\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.imageid }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"RunContext\" width=\"180px\" align=\"center\" prop=\"runcontext\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.runcontext }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"CreateTime\" width=\"180px\" align=\"center\" prop=\"createtime\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.createtime }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"StartTime\" width=\"180px\" align=\"center\" prop=\"starttime\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.starttime }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"EndTime\" width=\"180px\" align=\"center\" prop=\"endtime\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.endtime }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"Status\" width=\"100px\" align=\"center\" prop=\"status\">\n        <template slot-scope=\"{row}\">\n          <el-tag :type=\"row.status | statusFilter\" :hit=\"false\" :effect=\"row.status | statusEffectFilter\">\n            {{ row.status }}\n          </el-tag>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"DBStore\" min-width=\"300px\" prop=\"dbstore\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.dbstore }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"HomeDir\" width=\"300px\" align=\"center\" prop=\"homedir\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.homedir }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"Enable\" min-width=\"80px\" prop=\"enable\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.enable }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"User\" width=\"80px\" align=\"center\" prop=\"user\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.user }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"Actions\" align=\"center\" width=\"300\" class-name=\"small-padding fixed-width\">\n        <template slot-scope=\"{row}\">\n          <el-button type=\"primary\" size=\"mini\" @click=\"handleUpdate(row)\">\n            Edit\n          </el-button>\n          <el-button v-if=\"row.status!='deleted'\" size=\"mini\" type=\"danger\" @click=\"handleDelete(row)\">\n            Delete\n          </el-button>\n          <el-button type=\"primary\" size=\"mini\" @click=\"handleStart(row)\">\n            Start\n          </el-button>\n          <el-button v-if=\"row.status!='deleted'\" size=\"mini\" type=\"danger\" @click=\"handleStop(row)\">\n            Stop\n          </el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n\n    <pagination v-show=\"tableQuery.total>0\" :total=\"tableQuery.total\" :layout=\"tableQuery.layout\" :page.sync=\"tableQuery.pageIndex\" :limit.sync=\"tableQuery.pageLimit\" :hidden=\"tableQuery.hidden\" :page-sizes=\"tableQuery.pageSizes\" @pagination=\"getList\" />\n\n    <el-dialog :title=\"textMap[dialogStatus]\" :visible.sync=\"dialogFormVisible\">\n      <el-form ref=\"dataForm\" :rules=\"rules\" :model=\"temp\" label-position=\"left\" label-width=\"100px\" style=\"width: 400px; margin-left:50px;\">\n        <el-form-item label=\"ImageId\" prop=\"imageid\">\n          <el-input v-model=\"temp.imageid\" />\n        </el-form-item>\n        <el-form-item label=\"ProcessNum\" prop=\"processnum\">\n          <el-select v-model=\"temp.processnum\" class=\"filter-item\" placeholder=\"Please select\">\n            <el-option v-for=\"item in processnumOptions\" :key=\"item.key\" :label=\"item.label\" :value=\"item.key\" />\n          </el-select>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"dialogFormVisible = false\">\n          Cancel\n        </el-button>\n        <el-button type=\"primary\" @click=\"createData()\">\n          Confirm\n        </el-button>\n      </div>\n    </el-dialog>\n\n    <el-dialog :title=\"textMap[dialogStatus]\" :visible.sync=\"dialogFormVisibleEdit\">\n      <el-form ref=\"dataForm\" :rules=\"rules\" :model=\"temp\" label-position=\"left\" label-width=\"100px\" style=\"width: 400px; margin-left:50px;\">\n        <el-form-item label=\"FlowId\" prop=\"flowid\">\n          <span>{{ temp.flowid }}</span>\n        </el-form-item>\n        <el-form-item label=\"DBStore\">\n          <el-input v-model=\"temp.dbstore\" :autosize=\"{ minRows: 2, maxRows: 4}\" type=\"textarea\" placeholder=\"Please input\" />\n        </el-form-item>\n        <el-form-item label=\"HomeDir\">\n          <el-input v-model=\"temp.homedir\" :autosize=\"{ minRows: 2, maxRows: 4}\" type=\"textarea\" placeholder=\"Please input\" />\n        </el-form-item>\n        <el-form-item label=\"RunContext\" prop=\"runcontext\">\n          <el-input v-model=\"temp.runcontext\" />\n        </el-form-item>\n        <el-form-item label=\"Enable\" prop=\"enable\">\n          <el-select v-model=\"temp.enable\" class=\"filter-item\" placeholder=\"Please select\">\n            <el-option v-for=\"item in enableOptions\" :key=\"item.key\" :label=\"item.label\" :value=\"item.key\" />\n          </el-select>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"dialogFormVisibleEdit = false\">\n          Cancel\n        </el-button>\n        <el-button type=\"primary\" @click=\"updateData()\">\n          Confirm\n        </el-button>\n      </div>\n    </el-dialog>\n\n  </div>\n</template>\n\n<script>\nimport waves from '@/directive/waves' // waves directive\nimport Pagination from '@/components/Pagination' // secondary package based on el-pagination\nimport defaultConfig from '@/config'\n\nconst { global_system_accesstoken, global_system_data_url, global_system_storage_key } = defaultConfig\n\nexport default {\n  name: 'InstanceTable',\n  components: { Pagination },\n  directives: { waves },\n  filters: {\n    statusFilter(status) {\n      const statusMap = {\n        Done: 'success',\n        Ready: 'info',\n        Pending: 'info',\n        Submit: 'info',\n        Go: 'info',\n        Fail: 'danger',\n        Stop: 'info',\n        Running: 'warning'\n      }\n      return statusMap[status]\n    },\n    statusEffectFilter(status) {\n      const statusEffectMap = {\n        Done: 'dark',\n        Ready: 'plain',\n        Pending: 'light',\n        Submit: 'light',\n        Go: 'light',\n        Fail: 'dark',\n        Stop: 'plain',\n        Running: 'dark'\n      }\n      return statusEffectMap[status]\n    }\n  },\n  data() {\n    return {\n      tableKey: 0,\n      listLoading: true,\n      tableQuery: {\n        title: '',\n        sort: '+imageid',\n        total: 0,\n        srcData: null,\n        pageSizes: [10],\n        pageIndex: 1,\n        pageData: null,\n        pageLimit: 10,\n        hidden: false,\n        layout: 'total, prev, pager, next, jumper'\n      },\n      sortOptions: [{ label: 'ID Ascending', key: '+imageid' }, { label: 'ID Descending', key: '-imageid' }],\n      enableOptions: ['1', '0'],\n      processnumOptions: [{ label: 'routine-1', key: '1' }, { label: 'routine-2', key: '2' }, { label: 'routine-3', key: '3' }, { label: 'routine-4', key: '4' }, { label: 'routine-5', key: '5' }, { label: 'routine-6', key: '6' }, { label: 'routine-7', key: '7' }, { label: 'routine-8', key: '' }, { label: 'routine-9', key: '9' }],\n      temp: {\n        imageid: undefined,\n        flowid: '',\n        processnum: '1',\n        runcontext: '',\n        tag: '',\n        dbstore: '',\n        homedir: '',\n        enable: '1'\n      },\n      dialogFormVisible: false,\n      dialogFormVisibleEdit: false,\n      dialogStatus: '',\n      textMap: {\n        update: 'Edit',\n        create: 'Create'\n      },\n      rules: {\n        imageid: [{ required: true, message: 'imageid is required', trigger: 'change' }]\n      }\n    }\n  },\n  created() {\n    this.getList()\n  },\n  methods: {\n    getList() {\n      this.listLoading = true\n      let accesstoken = ''\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken\n      }\n      const url = global_system_data_url + '/instance/ls/status?accesstoken=' + accesstoken\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n        })\n      })\n        .then(response => response.json())\n        .then((responsedata) => {\n          this.listLoading = false\n          if (responsedata.status_code !== 200) {\n            this.$notify({\n              title: 'Error',\n              message: responsedata.status_txt,\n              type: 'error',\n              duration: 2000\n            })\n            return\n          }\n          this.tableQuery.srcData = responsedata.data\n          this.tableQuery.total = (responsedata.data).length\n          this.tableQuery.pageSizes = []\n          for (var i = 1; i <= this.tableQuery.total / 10 + 1; i++) {\n            this.tableQuery.pageSizes.push(i * 10)\n          }\n          this.tableQuery.pageData = this.tableQuery.srcData.slice((this.tableQuery.pageIndex - 1) * this.tableQuery.pageLimit, (this.tableQuery.pageIndex) * this.tableQuery.pageLimit)\n        })\n        .catch(function(err) {\n          console.log(err)\n          this.listLoading = false\n        })\n    },\n    handleFilter() {\n      if ((this.tableQuery.title).length === 0) {\n        this.getList()\n        return\n      }\n      this.tableQuery.pageIndex = 1\n      var t_data = this.tableQuery.srcData\n      this.tableQuery.pageData = []\n      var j = 0\n      for (var k = 0; k < (t_data).length; k++) {\n        var t_dat = t_data[k]\n        for (var t_key in t_dat) {\n          if (t_dat[t_key] === null) {\n            continue\n          }\n          if (String(t_dat[t_key]).indexOf(this.tableQuery.title) !== -1) {\n            this.tableQuery.pageData[j] = t_data[k]\n            j++\n            break\n          }\n        }\n      }\n      this.tableQuery.total = (this.tableQuery.pageData).length\n      this.tableQuery.pageSizes = []\n      for (var i = 1; i <= this.tableQuery.total / 10 + 1; i++) {\n        this.tableQuery.pageSizes.push(i * 10)\n      }\n    },\n    sortChange(data) {\n      console.log(data)\n      const { prop, order } = data\n      if (prop === 'imageid') {\n        this.sortByID(order)\n      }\n    },\n    sortByID(order) {\n      if (order === null) {\n        this.tableQuery.sort = this.tableQuery.sort === '+imageid' ? '-imageid' : '+imageid'\n      } else if (order === 'ascending') {\n        this.tableQuery.sort = '+imageid'\n      } else {\n        this.tableQuery.sort = '-imageid'\n      }\n      if (this.tableQuery.sort === '+imageid') {\n        this.tableQuery.pageData = this.tableQuery.pageData.sort((a, b) => (a.length === b.length) ? b.imageid.localeCompare(a.imageid) : (b.imageid - a.imageid))\n      } else {\n        this.tableQuery.pageData = this.tableQuery.pageData.sort((a, b) => (a.length === b.length) ? a.imageid.localeCompare(b.imageid) : (a.imageid - b.imageid))\n      }\n    },\n    resetTemp() {\n      this.temp = {\n        tag: '',\n        dbstore: '',\n        enable: ''\n      }\n    },\n    handleCreate() {\n      this.resetTemp()\n      this.dialogStatus = 'create'\n      this.dialogFormVisible = true\n      this.$nextTick(() => {\n        this.$refs['dataForm'].clearValidate()\n      })\n    },\n    createData() {\n      this.$refs['dataForm'].validate((valid) => {\n        if (valid) {\n          let accesstoken = ''\n          if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n            accesstoken = global_system_accesstoken\n          } else {\n            accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken\n          }\n          const url = global_system_data_url + '/instance/create?accesstoken=' + accesstoken\n          fetch(url, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json;charset=UTF-8'\n            },\n            body: JSON.stringify({\n              imageid: this.temp.imageid,\n              processnum: this.temp.processnum\n            })\n          })\n            .then(response => response.json())\n            .then((responsedata) => {\n              this.dialogFormVisible = false\n              if (responsedata.status_code === 200) {\n                this.$notify({\n                  title: 'Success',\n                  message: 'Start Successfully',\n                  type: 'success',\n                  duration: 2000\n                })\n              } else {\n                this.$notify({\n                  title: 'Error',\n                  message: responsedata.status_txt,\n                  type: 'warning',\n                  duration: 2000\n                })\n              }\n              this.getList()\n            })\n            .catch(function(err) {\n              console.log(err)\n              this.$notify({\n                title: 'Error',\n                message: 'Created Error',\n                type: 'error',\n                duration: 2000\n              })\n            })\n        }\n      })\n    },\n    handleStart(row) {\n      this.$confirm('Confirm to start instance?', 'Warning', {\n        confirmButtonText: 'Confirm',\n        cancelButtonText: 'Cancel',\n        type: 'warning'\n      })\n        .then(async() => {\n          this.instanceStart(row)\n        })\n        .catch(err => { console.error(err) })\n    },\n    instanceStart(row) {\n      let accesstoken = ''\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken\n      }\n      const url = global_system_data_url + '/instance/start?accesstoken=' + accesstoken\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n          flowid: row.flowid,\n          processnum: '1'\n        })\n      })\n        .then(response => response.json())\n        .then((responsedata) => {\n          this.dialogFormVisible = false\n          if (responsedata.status_code === 200) {\n            this.$notify({\n              title: 'Success',\n              message: 'Start Successfully',\n              type: 'success',\n              duration: 2000\n            })\n          } else {\n            this.$notify({\n              title: 'Error',\n              message: responsedata.status_txt,\n              type: 'warning',\n              duration: 2000\n            })\n          }\n          this.getList()\n        })\n        .catch(function(err) {\n          console.log(err)\n          this.$notify({\n            title: 'Error',\n            message: 'Start Error',\n            type: 'error',\n            duration: 2000\n          })\n        })\n    },\n    handleUpdate(row) {\n      this.temp = Object.assign({}, row)\n      this.dialogStatus = 'update'\n      this.dialogFormVisibleEdit = true\n      this.$nextTick(() => {\n        this.$refs['dataForm'].clearValidate()\n      })\n    },\n    updateData() {\n      let accesstoken = ''\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken\n      }\n      const url = global_system_data_url + '/flow/update?accesstoken=' + accesstoken\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n          flowid: this.temp.flowid,\n          dbstore: this.temp.dbstore,\n          homedir: this.temp.homedir,\n          runcontext: this.temp.runcontext,\n          enable: this.temp.enable\n        })\n      })\n        .then(response => response.json())\n        .then((responsedata) => {\n          this.dialogFormVisibleEdit = false\n          if (responsedata.status_code === 200) {\n            this.$notify({\n              title: 'Success',\n              message: 'Start Successfully',\n              type: 'success',\n              duration: 2000\n            })\n          } else {\n            this.$notify({\n              title: 'Error',\n              message: responsedata.status_txt,\n              type: 'warning',\n              duration: 2000\n            })\n          }\n          this.getList()\n        })\n        .catch(function(err) {\n          console.log(err)\n          this.$notify({\n            title: 'Error',\n            message: 'Start Error',\n            type: 'error',\n            duration: 2000\n          })\n        })\n    },\n    handleDelete(row) {\n      this.$confirm('Confirm to delete instance?', 'Warning', {\n        confirmButtonText: 'Confirm',\n        cancelButtonText: 'Cancel',\n        type: 'warning'\n      })\n        .then(async() => {\n          this.deleteData(row)\n        })\n        .catch(err => { console.error(err) })\n    },\n    deleteData(row) {\n      let accesstoken = ''\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken\n      }\n      const url = global_system_data_url + '/instance/rm?accesstoken=' + accesstoken\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n          flowid: row.flowid\n        })\n      })\n        .then(response => response.json())\n        .then((responsedata) => {\n          this.dialogFormVisible = false\n          if (responsedata.status_code === 200) {\n            this.$notify({\n              title: 'Success',\n              message: 'Start Successfully',\n              type: 'success',\n              duration: 2000\n            })\n          } else {\n            this.$notify({\n              title: 'Error',\n              message: responsedata.status_txt,\n              type: 'warning',\n              duration: 2000\n            })\n          }\n          this.getList()\n        })\n        .catch(function(err) {\n          console.log(err)\n          this.$notify({\n            title: 'Error',\n            message: 'Start Error',\n            type: 'error',\n            duration: 2000\n          })\n        })\n    },\n    handleStop(row) {\n      this.$confirm('Confirm to stop instance?', 'Warning', {\n        confirmButtonText: 'Confirm',\n        cancelButtonText: 'Cancel',\n        type: 'warning'\n      })\n        .then(async() => {\n          this.instanceStop(row)\n        })\n        .catch(err => { console.error(err) })\n    },\n    instanceStop(row) {\n      let accesstoken = ''\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken\n      }\n      const url = global_system_data_url + '/instance/stop?accesstoken=' + accesstoken\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n          flowid: row.flowid\n        })\n      })\n        .then(response => response.json())\n        .then((responsedata) => {\n          this.dialogFormVisible = false\n          if (responsedata.status_code === 200) {\n            this.$notify({\n              title: 'Success',\n              message: 'Stop Successfully',\n              type: 'success',\n              duration: 2000\n            })\n          } else {\n            this.$notify({\n              title: 'Error',\n              message: responsedata.status_txt,\n              type: 'warning',\n              duration: 2000\n            })\n          }\n          this.getList()\n        })\n        .catch(function(err) {\n          console.log(err)\n          this.$notify({\n            title: 'Error',\n            message: 'Stop Error',\n            type: 'error',\n            duration: 2000\n          })\n        })\n    },\n    getSortClass: function(key) {\n      const sort = this.tableQuery.sort\n      return sort === `+${key}` ? 'ascending' : 'descending'\n    }\n  }\n}\n</script>\n"],"sourceRoot":"src/views/auto-image"}]}