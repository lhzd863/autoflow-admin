{"remainingRequest":"/home/k8s/nodejs/autoflow-admin/node_modules/babel-loader/lib/index.js!/home/k8s/nodejs/autoflow-admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/k8s/nodejs/autoflow-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/k8s/nodejs/autoflow-admin/src/views/auto-flow-job/flow-job-timewindow-table.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/k8s/nodejs/autoflow-admin/src/views/auto-flow-job/flow-job-timewindow-table.vue","mtime":1590389210239},{"path":"/home/k8s/nodejs/autoflow-admin/node_modules/cache-loader/dist/cjs.js","mtime":1588903989540},{"path":"/home/k8s/nodejs/autoflow-admin/node_modules/babel-loader/lib/index.js","mtime":1588861182369},{"path":"/home/k8s/nodejs/autoflow-admin/node_modules/cache-loader/dist/cjs.js","mtime":1588903989540},{"path":"/home/k8s/nodejs/autoflow-admin/node_modules/vue-loader/lib/index.js","mtime":1588861203543}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/home/k8s/nodejs/autoflow-admin/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"/home/k8s/nodejs/autoflow-admin/node_modules/@babel/runtime-corejs2/helpers/asyncToGenerator\"));\n\nrequire(\"core-js/modules/es6.array.sort\");\n\nvar _waves = _interopRequireDefault(require(\"@/directive/waves\"));\n\nvar _Pagination = _interopRequireDefault(require(\"@/components/Pagination\"));\n\nvar _config = _interopRequireDefault(require(\"@/config\"));\n\nvar _Sticky = _interopRequireDefault(require(\"@/components/Sticky\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// waves directive\n// secondary package based on el-pagination\nvar global_system_accesstoken = _config.default.global_system_accesstoken,\n    global_system_data_url = _config.default.global_system_data_url,\n    global_system_storage_key = _config.default.global_system_storage_key;\nvar _default = {\n  name: 'FlowJobParameterTable',\n  components: {\n    Pagination: _Pagination.default,\n    Sticky: _Sticky.default\n  },\n  directives: {\n    waves: _waves.default\n  },\n  filters: {\n    statusFilter: function statusFilter(status) {\n      var statusMap = {\n        Succ: 'success',\n        Ready: 'info',\n        Pending: 'info',\n        Submit: 'info',\n        Go: 'info',\n        Fail: 'danger',\n        Stop: 'info',\n        Running: 'warning'\n      };\n      return statusMap[status];\n    },\n    statusEffectFilter: function statusEffectFilter(status) {\n      var statusEffectMap = {\n        Succ: 'dark',\n        Ready: 'plain',\n        Pending: 'light',\n        Submit: 'light',\n        Go: 'light',\n        Fail: 'dark',\n        Stop: 'plain',\n        Running: 'dark'\n      };\n      return statusEffectMap[status];\n    }\n  },\n  data: function data() {\n    return {\n      tableKey: 0,\n      listLoading: false,\n      tableQuery: {\n        content: '',\n        title: '',\n        sort: '+step',\n        total: 0,\n        srcData: null,\n        pageSizes: [10],\n        pageIndex: 1,\n        pageData: null,\n        pageLimit: 10,\n        hidden: false,\n        layout: 'total, prev, pager, next, jumper'\n      },\n      sortOptions: [{\n        label: 'ID Ascending',\n        key: '+imageid'\n      }, {\n        label: 'ID Descending',\n        key: '-imageid'\n      }],\n      enableOptions: [{\n        label: 'Enable',\n        key: '1'\n      }, {\n        label: 'Disable',\n        key: '0'\n      }],\n      allowOptions: [{\n        label: 'N',\n        key: 'N'\n      }, {\n        label: 'Y',\n        key: 'Y'\n      }],\n      hourOptions: [{\n        label: '00',\n        key: 0\n      }, {\n        label: '01',\n        key: 1\n      }, {\n        label: '02',\n        key: 2\n      }, {\n        label: '03',\n        key: 3\n      }, {\n        label: '04',\n        key: 4\n      }, {\n        label: '05',\n        key: 5\n      }, {\n        label: '06',\n        key: 6\n      }, {\n        label: '07',\n        key: 7\n      }, {\n        label: '08',\n        key: 8\n      }, {\n        label: '09',\n        key: 9\n      }, {\n        label: '10',\n        key: 10\n      }, {\n        label: '11',\n        key: 11\n      }, {\n        label: '12',\n        key: 12\n      }, {\n        label: '13',\n        key: 13\n      }, {\n        label: '14',\n        key: 14\n      }, {\n        label: '15',\n        key: 15\n      }, {\n        label: '16',\n        key: 16\n      }, {\n        label: '17',\n        key: 17\n      }, {\n        label: '18',\n        key: 18\n      }, {\n        label: '19',\n        key: 19\n      }, {\n        label: '20',\n        key: 20\n      }, {\n        label: '21',\n        key: 21\n      }, {\n        label: '22',\n        key: 22\n      }, {\n        label: '23',\n        key: 23\n      }],\n      temp: {\n        flowid: '',\n        sys: '',\n        job: '',\n        allow: '',\n        starthour: 0,\n        endhour: 0,\n        description: '',\n        enable: '1'\n      },\n      dialogFormVisible: false,\n      dialogStatus: '',\n      textMap: {\n        update: 'Edit',\n        create: 'Create'\n      },\n      rules: {\n        sys: [{\n          required: true,\n          message: 'sys is required',\n          trigger: 'change'\n        }],\n        job: [{\n          required: true,\n          message: 'job is required',\n          trigger: 'change'\n        }],\n        dependencysys: [{\n          required: true,\n          message: 'dependency sys is required',\n          trigger: 'change'\n        }],\n        dependencyjob: [{\n          required: true,\n          message: 'dependency job is required',\n          trigger: 'change'\n        }]\n      }\n    };\n  },\n  created: function created() {},\n  methods: {\n    getList: function getList() {\n      var _this = this;\n\n      if (this.tableQuery.content.length === 0) {\n        return;\n      }\n\n      this.listLoading = true;\n      var accesstoken = '';\n\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken;\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken;\n      }\n\n      var url = global_system_data_url + '/flow/job/timewindow/ls?accesstoken=' + accesstoken;\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n          flowid: this.tableQuery.content\n        })\n      }).then(function (response) {\n        return response.json();\n      }).then(function (responsedata) {\n        if (responsedata.status_code !== 200) {\n          _this.$notify({\n            title: 'Error',\n            message: responsedata.status_txt,\n            type: 'error',\n            duration: 2000\n          });\n\n          return;\n        }\n\n        _this.tableQuery.srcData = responsedata.data;\n        _this.tableQuery.total = responsedata.data.length;\n        _this.tableQuery.pageSizes = [];\n\n        for (var i = 1; i <= _this.tableQuery.total / 10 + 1; i++) {\n          _this.tableQuery.pageSizes.push(i * 10);\n        }\n\n        _this.tableQuery.pageData = _this.tableQuery.srcData.slice((_this.tableQuery.pageIndex - 1) * _this.tableQuery.pageLimit, _this.tableQuery.pageIndex * _this.tableQuery.pageLimit);\n        _this.listLoading = false;\n      }).catch(function (err) {\n        console.log(err);\n        this.listLoading = false;\n      });\n    },\n    handleFilter: function handleFilter() {\n      if (this.tableQuery.title.length === 0) {\n        this.getList();\n        return;\n      }\n\n      this.tableQuery.pageIndex = 1;\n      var t_data = this.tableQuery.srcData;\n      this.tableQuery.pageData = [];\n      var j = 0;\n\n      for (var k = 0; k < t_data.length; k++) {\n        var t_dat = t_data[k];\n\n        for (var t_key in t_dat) {\n          if (t_dat[t_key] === null) {\n            continue;\n          }\n\n          if (String(t_dat[t_key]).indexOf(this.tableQuery.title) !== -1) {\n            this.tableQuery.pageData[j] = t_data[k];\n            j++;\n            break;\n          }\n        }\n      }\n\n      this.tableQuery.total = this.tableQuery.pageData.length;\n      this.tableQuery.pageSizes = [];\n\n      for (var i = 1; i <= this.tableQuery.total / 10 + 1; i++) {\n        this.tableQuery.pageSizes.push(i * 10);\n      }\n    },\n    sortChange: function sortChange(data) {\n      var prop = data.prop,\n          order = data.order;\n\n      if (prop === 'job') {\n        this.sortByJob(order, 'job');\n      }\n\n      if (prop === 'key') {\n        this.sortByKey(order, 'key');\n      }\n\n      if (prop === 'sys') {\n        this.sortBySys(order, 'sys');\n      }\n    },\n    sortBySys: function sortBySys(order, key) {\n      if (order === null) {\n        this.tableQuery.sort = this.tableQuery.sort === \"+\".concat(key) ? \"-\".concat(key) : \"+\".concat(key);\n      } else if (order === 'ascending') {\n        this.tableQuery.sort = \"+\".concat(key);\n      } else {\n        this.tableQuery.sort = \"-\".concat(key);\n      }\n\n      if (this.tableQuery.sort === \"+\".concat(key)) {\n        this.tableQuery.pageData = this.tableQuery.pageData.sort(function (a, b) {\n          return a.length === b.length ? b.sys.localeCompare(a.sys) : b.sys - a.sys;\n        });\n      } else {\n        this.tableQuery.pageData = this.tableQuery.pageData.sort(function (a, b) {\n          return a.length === b.length ? a.sys.localeCompare(b.sys) : a.sys - b.sys;\n        });\n      }\n    },\n    sortByJob: function sortByJob(order, key) {\n      if (order === null) {\n        this.tableQuery.sort = this.tableQuery.sort === \"+\".concat(key) ? \"-\".concat(key) : \"+\".concat(key);\n      } else if (order === 'ascending') {\n        this.tableQuery.sort = \"+\".concat(key);\n      } else {\n        this.tableQuery.sort = \"-\".concat(key);\n      }\n\n      if (this.tableQuery.sort === \"+\".concat(key)) {\n        this.tableQuery.pageData = this.tableQuery.pageData.sort(function (a, b) {\n          return a.length === b.length ? b.job.localeCompare(a.job) : b.job - a.job;\n        });\n      } else {\n        this.tableQuery.pageData = this.tableQuery.pageData.sort(function (a, b) {\n          return a.length === b.length ? a.job.localeCompare(b.job) : a.job - b.job;\n        });\n      }\n    },\n    sortByKey: function sortByKey(order, key) {\n      if (order === null) {\n        this.tableQuery.sort = this.tableQuery.sort === \"+\".concat(key) ? \"-\".concat(key) : \"+\".concat(key);\n      } else if (order === 'ascending') {\n        this.tableQuery.sort = \"+\".concat(key);\n      } else {\n        this.tableQuery.sort = \"-\".concat(key);\n      }\n\n      if (this.tableQuery.sort === \"+\".concat(key)) {\n        this.tableQuery.pageData = this.tableQuery.pageData.sort(function (a, b) {\n          return a.length === b.length ? b.key.localeCompare(a.key) : b.key - a.key;\n        });\n      } else {\n        this.tableQuery.pageData = this.tableQuery.pageData.sort(function (a, b) {\n          return a.length === b.length ? a.key.localeCompare(b.key) : a.key - b.key;\n        });\n      }\n    },\n    resetTemp: function resetTemp() {\n      this.temp = {\n        flowid: '',\n        sys: '',\n        job: '',\n        allow: '',\n        starthour: 0,\n        endhour: 0,\n        description: '',\n        enable: ''\n      };\n    },\n    handleCreate: function handleCreate() {\n      var _this2 = this;\n\n      this.resetTemp();\n      this.dialogStatus = 'create';\n      this.dialogFormVisible = true;\n      this.$nextTick(function () {\n        _this2.$refs['dataForm'].clearValidate();\n      });\n    },\n    createData: function createData() {\n      var _this3 = this;\n\n      this.$refs['dataForm'].validate(function (valid) {\n        if (valid) {\n          var accesstoken = '';\n\n          if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n            accesstoken = global_system_accesstoken;\n          } else {\n            accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken;\n          }\n\n          var url = global_system_data_url + '/flow/job/timewindow/add?accesstoken=' + accesstoken;\n          fetch(url, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json;charset=UTF-8'\n            },\n            body: JSON.stringify({\n              flowid: _this3.tableQuery.content,\n              sys: _this3.temp.sys,\n              job: _this3.temp.job,\n              allow: _this3.temp.allow,\n              starthour: _this3.temp.starthour,\n              endhour: _this3.temp.endhour,\n              description: _this3.temp.description,\n              enable: _this3.temp.enable\n            })\n          }).then(function (response) {\n            return response.json();\n          }).then(function (responsedata) {\n            _this3.dialogFormVisible = false;\n\n            _this3.$notify({\n              title: 'Success',\n              message: 'Created Successfully',\n              type: 'success',\n              duration: 2000\n            });\n\n            _this3.getList();\n          }).catch(function (err) {\n            console.log(err);\n            this.$notify({\n              title: 'Error',\n              message: 'Created Error',\n              type: 'error',\n              duration: 2000\n            });\n          });\n        }\n      });\n    },\n    handleUpdate: function handleUpdate(row) {\n      var _this4 = this;\n\n      this.temp = Object.assign({}, row); // copy obj\n\n      this.dialogStatus = 'update';\n      this.dialogFormVisible = true;\n      this.$nextTick(function () {\n        _this4.$refs['dataForm'].clearValidate();\n      });\n    },\n    updateData: function updateData() {\n      var _this5 = this;\n\n      this.$refs['dataForm'].validate(function (valid) {\n        if (valid) {\n          var accesstoken = '';\n\n          if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n            accesstoken = global_system_accesstoken;\n          } else {\n            accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken;\n          }\n\n          var url = global_system_data_url + '/flow/job/timewindow/update?accesstoken=' + accesstoken;\n          fetch(url, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json;charset=UTF-8'\n            },\n            body: JSON.stringify({\n              flowid: _this5.tableQuery.content,\n              sys: _this5.temp.sys,\n              job: _this5.temp.job,\n              allow: _this5.temp.allow,\n              starthour: _this5.temp.starthour,\n              endhour: _this5.temp.endhour,\n              description: _this5.temp.description,\n              enable: _this5.temp.enable\n            })\n          }).then(function (response) {\n            return response.json();\n          }).then(function (responsedata) {\n            _this5.dialogFormVisible = false;\n\n            _this5.$notify({\n              title: 'Success',\n              message: 'Created Successfully',\n              type: 'success',\n              duration: 2000\n            });\n\n            _this5.getList();\n          }).catch(function (err) {\n            console.log(err);\n            this.$notify({\n              title: 'Error',\n              message: 'Created Error',\n              type: 'error',\n              duration: 2000\n            });\n          });\n        }\n      });\n    },\n    handleDelete: function handleDelete(row, index) {\n      var _this6 = this;\n\n      this.$confirm('Confirm to delete data?', 'Warning', {\n        confirmButtonText: 'Confirm',\n        cancelButtonText: 'Cancel',\n        type: 'warning'\n      }).then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this6.deleteData(row);\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))).catch(function (err) {\n        console.error(err);\n      });\n    },\n    deleteData: function deleteData(row, index) {\n      var _this7 = this;\n\n      var accesstoken = '';\n\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken;\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken;\n      }\n\n      var url = global_system_data_url + '/flow/job/timewindow/rm?accesstoken=' + accesstoken;\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n          flowid: this.tableQuery.content,\n          sys: this.temp.sys,\n          job: this.temp.job\n        })\n      }).then(function (response) {\n        return response.json();\n      }).then(function (responsedata) {\n        _this7.dialogFormVisible = false;\n\n        _this7.$notify({\n          title: 'Success',\n          message: 'Delete Successfully',\n          type: 'success',\n          duration: 2000\n        });\n\n        _this7.tableQuery.pageData.splice(index, 1);\n      }).catch(function (err) {\n        console.log(err);\n        this.$notify({\n          title: 'Error',\n          message: 'Delete Error',\n          type: 'error',\n          duration: 2000\n        });\n      });\n    },\n    getSortClass: function getSortClass(key) {\n      var sort = this.tableQuery.sort;\n      return sort === \"+\".concat(key) ? 'ascending' : 'descending';\n    }\n  }\n};\nexports.default = _default;",{"version":3,"sources":["flow-job-timewindow-table.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <sticky :z-index=\"10\" class-name=\"sub-navbar\">\n      <el-dropdown trigger=\"click\">\n        <el-button plain>\n          FlowId<i class=\"el-icon-caret-bottom el-icon--right\" />\n        </el-button>\n        <el-dropdown-menu slot=\"dropdown\" class=\"no-padding no-border\" style=\"width:300px\">\n          <el-input v-model=\"tableQuery.content\" placeholder=\"Please enter the content\">\n            <template slot=\"prepend\">\n              FlowId\n            </template>\n          </el-input>\n        </el-dropdown-menu>\n      </el-dropdown>\n\n      <el-button style=\"margin-left: 10px;\" type=\"success\" @click=\"getList\">\n        View\n      </el-button>\n    </sticky>\n    <div class=\"app-container\">\n      <div class=\"filter-container\">\n        <el-input v-model=\"tableQuery.title\" placeholder=\"Title\" style=\"width: 200px;\" class=\"filter-item\" @keyup.enter.native=\"handleFilter\" />\n        <el-button v-waves class=\"filter-item\" type=\"primary\" icon=\"el-icon-search\" @click=\"handleFilter\">\n          Search\n        </el-button>\n        <el-button class=\"filter-item\" style=\"margin-left: 10px;\" type=\"primary\" icon=\"el-icon-edit\" @click=\"handleCreate\">\n          Add\n        </el-button>\n      </div>\n\n      <el-table\n        :key=\"tableKey\"\n        v-loading=\"listLoading\"\n        :data=\"tableQuery.pageData\"\n        border\n        fit\n        highlight-current-row\n        style=\"width: 100%;\"\n        @sort-change=\"sortChange\"\n      >\n        <el-table-column label=\"Sys\" prop=\"sys\" sortable=\"custom\" align=\"center\" width=\"80\" :class-name=\"getSortClass('+sys')\" :sort-orders=\"['ascending', 'descending']\">\n          <template slot-scope=\"{row}\">\n            <span>{{ row.sys }}</span>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"Job\" prop=\"job\" sortable=\"custom\" align=\"center\" width=\"200\" :class-name=\"getSortClass('+job')\" :sort-orders=\"['ascending', 'descending']\">\n          <template slot-scope=\"{row}\">\n            <span>{{ row.job }}</span>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"Allow\" min-width=\"80px\">\n          <template slot-scope=\"{row}\">\n            <span>{{ row.allow }}</span>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"StartHour\" min-width=\"80px\">\n          <template slot-scope=\"{row}\">\n            <span>{{ row.starthour }}</span>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"EndHour\" min-width=\"80px\">\n          <template slot-scope=\"{row}\">\n            <span>{{ row.endhour }}</span>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"Description\" min-width=\"200px\">\n          <template slot-scope=\"{row}\"> \n            <span>{{ row.description }}</span>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"Enable\" min-width=\"80px\">\n          <template slot-scope=\"{row}\">\n            <span>{{ row.enable }}</span>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"Actions\" align=\"center\" width=\"150\" class-name=\"small-padding fixed-width\">\n          <template slot-scope=\"{row,$index}\">\n            <el-button type=\"primary\" size=\"mini\" @click=\"handleUpdate(row)\">\n              Edit\n            </el-button>\n            <el-button v-if=\"row.status!='deleted'\" size=\"mini\" type=\"danger\" @click=\"handleDelete(row,$index)\">\n              Delete\n            </el-button>\n          </template>\n        </el-table-column>\n      </el-table>\n\n      <pagination v-show=\"tableQuery.total>0\" :total=\"tableQuery.total\" :layout=\"tableQuery.layout\" :page.sync=\"tableQuery.pageIndex\" :limit.sync=\"tableQuery.pageLimit\" :hidden=\"tableQuery.hidden\" :page-sizes=\"tableQuery.pageSizes\" @pagination=\"getList\" />\n\n      <el-dialog :title=\"textMap[dialogStatus]\" :visible.sync=\"dialogFormVisible\">\n        <el-form ref=\"dataForm\" :rules=\"rules\" :model=\"temp\" label-position=\"left\" label-width=\"100px\" style=\"margin-left:50px;\">\n          <el-form-item v-if=\"dialogStatus==='create'?true:false\" label=\"Sys\" prop=\"sys\">\n            <el-input v-model=\"temp.sys\" />\n          </el-form-item>\n          <el-form-item v-if=\"dialogStatus==='create'?true:false\" label=\"Job\" prop=\"job\">\n            <el-input v-model=\"temp.job\" />\n          </el-form-item>\n          <el-form-item v-if=\"dialogStatus==='create'?false:true\" label=\"Sys\" prop=\"sys\">\n            <span> {{ temp.sys }} </span>\n          </el-form-item>\n          <el-form-item v-if=\"dialogStatus==='create'?false:true\" label=\"Job\" prop=\"job\">\n            <span> {{ temp.job }} </span>\n          </el-form-item>\n          <el-form-item label=\"Allow\">\n            <el-select v-model=\"temp.allow\" class=\"filter-item\" placeholder=\"Please select\">\n              <el-option v-for=\"item in allowOptions\" :key=\"item.key\" :label=\"item.label\" :value=\"item.key\" />\n            </el-select>\n          </el-form-item>\n          <el-form-item label=\"StartHour\">\n            <el-select v-model=\"temp.starthour\" class=\"filter-item\" placeholder=\"Please select\">\n              <el-option v-for=\"item in hourOptions\" :key=\"item.key\" :label=\"item.label\" :value=\"item.key\" />\n            </el-select>\n          </el-form-item>\n          <el-form-item label=\"EndHour\">\n            <el-select v-model=\"temp.endhour\" class=\"filter-item\" placeholder=\"Please select\">\n              <el-option v-for=\"item in hourOptions\" :key=\"item.key\" :label=\"item.label\" :value=\"item.key\" />\n            </el-select>\n          </el-form-item>\n          <el-form-item label=\"Description\" prop=\"description\">\n            <el-input v-model=\"temp.description\" :autosize=\"{ minRows: 2, maxRows: 4}\" type=\"textarea\" placeholder=\"Please input\" />\n          </el-form-item>\n          <el-form-item label=\"Enable\">\n            <el-select v-model=\"temp.enable\" class=\"filter-item\" placeholder=\"Please select\">\n              <el-option v-for=\"item in enableOptions\" :key=\"item.key\" :label=\"item.label\" :value=\"item.key\" />\n            </el-select>\n          </el-form-item>\n        </el-form>\n        <div slot=\"footer\" class=\"dialog-footer\">\n          <el-button @click=\"dialogFormVisible = false\">\n            Cancel\n          </el-button>\n          <el-button type=\"primary\" @click=\"dialogStatus==='create'?createData():updateData()\">\n            Confirm\n          </el-button>\n        </div>\n      </el-dialog>\n    </div>\n  </div>\n</template>\n\n<script>\nimport waves from '@/directive/waves' // waves directive\nimport Pagination from '@/components/Pagination' // secondary package based on el-pagination\nimport defaultConfig from '@/config'\nimport Sticky from '@/components/Sticky'\n\nconst { global_system_accesstoken, global_system_data_url, global_system_storage_key } = defaultConfig\n\nexport default {\n  name: 'FlowJobParameterTable',\n  components: { Pagination, Sticky },\n  directives: { waves },\n  filters: {\n    statusFilter(status) {\n      const statusMap = {\n        Succ: 'success',\n        Ready: 'info',\n        Pending: 'info',\n        Submit: 'info',\n        Go: 'info',\n        Fail: 'danger',\n        Stop: 'info',\n        Running: 'warning'\n      }\n      return statusMap[status]\n    },\n    statusEffectFilter(status) {\n      const statusEffectMap = {\n        Succ: 'dark',\n        Ready: 'plain',\n        Pending: 'light',\n        Submit: 'light',\n        Go: 'light',\n        Fail: 'dark',\n        Stop: 'plain',\n        Running: 'dark'\n      }\n      return statusEffectMap[status]\n    }\n  },\n  data() {\n    return {\n      tableKey: 0,\n      listLoading: false,\n      tableQuery: {\n        content: '',\n        title: '',\n        sort: '+step',\n        total: 0,\n        srcData: null,\n        pageSizes: [10],\n        pageIndex: 1,\n        pageData: null,\n        pageLimit: 10,\n        hidden: false,\n        layout: 'total, prev, pager, next, jumper'\n      },\n      sortOptions: [{ label: 'ID Ascending', key: '+imageid' }, { label: 'ID Descending', key: '-imageid' }],\n      enableOptions: [{ label: 'Enable', key: '1' }, { label: 'Disable', key: '0' }],\n      allowOptions: [{ label: 'N', key: 'N' }, { label: 'Y', key: 'Y' }],\n      hourOptions: [{ label: '00', key: 0 }, { label: '01', key: 1 }, { label: '02', key: 2 }, { label: '03', key: 3 }, { label: '04', key: 4 }, { label: '05', key: 5 }, { label: '06', key: 6 }, { label: '07', key: 7 }, { label: '08', key: 8 }, { label: '09', key: 9 }, { label: '10', key: 10 }, { label: '11', key: 11 }, { label: '12', key: 12 }, { label: '13', key: 13 }, { label: '14', key: 14 }, { label: '15', key: 15 }, { label: '16', key: 16 }, { label: '17', key: 17 }, { label: '18', key: 18 }, { label: '19', key: 19 }, { label: '20', key: 20 }, { label: '21', key: 21 }, { label: '22', key: 22 }, { label: '23', key: 23 }],\n      temp: {\n        flowid: '',\n        sys: '',\n        job: '',\n        allow: '',\n        starthour: 0,\n        endhour: 0,\n        description: '',\n        enable: '1'\n      },\n      dialogFormVisible: false,\n      dialogStatus: '',\n      textMap: {\n        update: 'Edit',\n        create: 'Create'\n      },\n      rules: {\n        sys: [{ required: true, message: 'sys is required', trigger: 'change' }],\n        job: [{ required: true, message: 'job is required', trigger: 'change' }],\n        dependencysys: [{ required: true, message: 'dependency sys is required', trigger: 'change' }],\n        dependencyjob: [{ required: true, message: 'dependency job is required', trigger: 'change' }]\n      }\n    }\n  },\n  created() {\n  },\n  methods: {\n    getList() {\n      if ((this.tableQuery.content).length === 0) {\n        return\n      }\n      this.listLoading = true\n      let accesstoken = ''\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken\n      }\n      const url = global_system_data_url + '/flow/job/timewindow/ls?accesstoken=' + accesstoken\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n          flowid: this.tableQuery.content\n        })\n      })\n        .then(response => response.json())\n        .then((responsedata) => {\n          if (responsedata.status_code !== 200) {\n            this.$notify({\n              title: 'Error',\n              message: responsedata.status_txt,\n              type: 'error',\n              duration: 2000\n            })\n            return\n          }\n          this.tableQuery.srcData = responsedata.data\n          this.tableQuery.total = (responsedata.data).length\n          this.tableQuery.pageSizes = []\n          for (var i = 1; i <= this.tableQuery.total / 10 + 1; i++) {\n            this.tableQuery.pageSizes.push(i * 10)\n          }\n          this.tableQuery.pageData = this.tableQuery.srcData.slice((this.tableQuery.pageIndex - 1) * this.tableQuery.pageLimit, (this.tableQuery.pageIndex) * this.tableQuery.pageLimit)\n          this.listLoading = false\n        })\n        .catch(function(err) {\n          console.log(err)\n          this.listLoading = false\n        })\n    },\n    handleFilter() {\n      if ((this.tableQuery.title).length === 0) {\n        this.getList()\n        return\n      }\n      this.tableQuery.pageIndex = 1\n      var t_data = this.tableQuery.srcData\n      this.tableQuery.pageData = []\n      var j = 0\n      for (var k = 0; k < (t_data).length; k++) {\n        var t_dat = t_data[k]\n        for (var t_key in t_dat) {\n          if (t_dat[t_key] === null) {\n            continue\n          }\n          if (String(t_dat[t_key]).indexOf(this.tableQuery.title) !== -1) {\n            this.tableQuery.pageData[j] = t_data[k]\n            j++\n            break\n          }\n        }\n      }\n      this.tableQuery.total = (this.tableQuery.pageData).length\n      this.tableQuery.pageSizes = []\n      for (var i = 1; i <= this.tableQuery.total / 10 + 1; i++) {\n        this.tableQuery.pageSizes.push(i * 10)\n      }\n    },\n    sortChange(data) {\n      const { prop, order } = data\n      if (prop === 'job') {\n        this.sortByJob(order, 'job')\n      }\n      if (prop === 'key') {\n        this.sortByKey(order, 'key')\n      }\n      if (prop === 'sys') {\n        this.sortBySys(order, 'sys')\n      }\n    },\n    sortBySys(order, key) {\n      if (order === null) {\n        this.tableQuery.sort = this.tableQuery.sort === `+${key}` ? `-${key}` : `+${key}`\n      } else if (order === 'ascending') {\n        this.tableQuery.sort = `+${key}`\n      } else {\n        this.tableQuery.sort = `-${key}`\n      }\n      if (this.tableQuery.sort === `+${key}`) {\n        this.tableQuery.pageData = this.tableQuery.pageData.sort((a, b) => (a.length === b.length) ? b.sys.localeCompare(a.sys) : (b.sys - a.sys))\n      } else {\n        this.tableQuery.pageData = this.tableQuery.pageData.sort((a, b) => (a.length === b.length) ? a.sys.localeCompare(b.sys) : (a.sys - b.sys))\n      }\n    },\n    sortByJob(order, key) {\n      if (order === null) {\n        this.tableQuery.sort = this.tableQuery.sort === `+${key}` ? `-${key}` : `+${key}`\n      } else if (order === 'ascending') {\n        this.tableQuery.sort = `+${key}`\n      } else {\n        this.tableQuery.sort = `-${key}`\n      }\n      if (this.tableQuery.sort === `+${key}`) {\n        this.tableQuery.pageData = this.tableQuery.pageData.sort((a, b) => (a.length === b.length) ? b.job.localeCompare(a.job) : (b.job - a.job))\n      } else {\n        this.tableQuery.pageData = this.tableQuery.pageData.sort((a, b) => (a.length === b.length) ? a.job.localeCompare(b.job) : (a.job - b.job))\n      }\n    },\n    sortByKey(order, key) {\n      if (order === null) {\n        this.tableQuery.sort = this.tableQuery.sort === `+${key}` ? `-${key}` : `+${key}`\n      } else if (order === 'ascending') {\n        this.tableQuery.sort = `+${key}`\n      } else {\n        this.tableQuery.sort = `-${key}`\n      }\n      if (this.tableQuery.sort === `+${key}`) {\n        this.tableQuery.pageData = this.tableQuery.pageData.sort((a, b) => (a.length === b.length) ? b.key.localeCompare(a.key) : (b.key - a.key))\n      } else {\n        this.tableQuery.pageData = this.tableQuery.pageData.sort((a, b) => (a.length === b.length) ? a.key.localeCompare(b.key) : (a.key - b.key))\n      }\n    },\n    resetTemp() {\n      this.temp = {\n        flowid: '',\n        sys: '',\n        job: '',\n        allow: '',\n        starthour: 0,\n        endhour: 0,\n        description: '',\n        enable: ''\n      }\n    },\n    handleCreate() {\n      this.resetTemp()\n      this.dialogStatus = 'create'\n      this.dialogFormVisible = true\n      this.$nextTick(() => {\n        this.$refs['dataForm'].clearValidate()\n      })\n    },\n    createData() {\n      this.$refs['dataForm'].validate((valid) => {\n        if (valid) {\n          let accesstoken = ''\n          if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n            accesstoken = global_system_accesstoken\n          } else {\n            accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken\n          }\n          const url = global_system_data_url + '/flow/job/timewindow/add?accesstoken=' + accesstoken\n          fetch(url, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json;charset=UTF-8'\n            },\n            body: JSON.stringify({\n              flowid: this.tableQuery.content,\n              sys: this.temp.sys,\n              job: this.temp.job,\n              allow: this.temp.allow,\n              starthour: this.temp.starthour,\n              endhour: this.temp.endhour,\n              description: this.temp.description,\n              enable: this.temp.enable\n            })\n          })\n            .then(response => response.json())\n            .then((responsedata) => {\n              this.dialogFormVisible = false\n              this.$notify({\n                title: 'Success',\n                message: 'Created Successfully',\n                type: 'success',\n                duration: 2000\n              })\n              this.getList()\n            })\n            .catch(function(err) {\n              console.log(err)\n              this.$notify({\n                title: 'Error',\n                message: 'Created Error',\n                type: 'error',\n                duration: 2000\n              })\n            })\n        }\n      })\n    },\n    handleUpdate(row) {\n      this.temp = Object.assign({}, row) // copy obj\n      this.dialogStatus = 'update'\n      this.dialogFormVisible = true\n      this.$nextTick(() => {\n        this.$refs['dataForm'].clearValidate()\n      })\n    },\n    updateData() {\n      this.$refs['dataForm'].validate((valid) => {\n        if (valid) {\n          let accesstoken = ''\n          if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n            accesstoken = global_system_accesstoken\n          } else {\n            accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken\n          }\n          const url = global_system_data_url + '/flow/job/timewindow/update?accesstoken=' + accesstoken\n          fetch(url, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json;charset=UTF-8'\n            },\n            body: JSON.stringify({\n              flowid: this.tableQuery.content,\n              sys: this.temp.sys,\n              job: this.temp.job,\n              allow: this.temp.allow,\n              starthour: this.temp.starthour,\n              endhour: this.temp.endhour,\n              description: this.temp.description,\n              enable: this.temp.enable\n            })\n          })\n            .then(response => response.json())\n            .then((responsedata) => {\n              this.dialogFormVisible = false\n              this.$notify({\n                title: 'Success',\n                message: 'Created Successfully',\n                type: 'success',\n                duration: 2000\n              })\n              this.getList()\n            })\n            .catch(function(err) {\n              console.log(err)\n              this.$notify({\n                title: 'Error',\n                message: 'Created Error',\n                type: 'error',\n                duration: 2000\n              })\n            })\n        }\n      })\n    },\n    handleDelete(row, index) {\n      this.$confirm('Confirm to delete data?', 'Warning', {\n        confirmButtonText: 'Confirm',\n        cancelButtonText: 'Cancel',\n        type: 'warning'\n      })\n        .then(async() => {\n          this.deleteData(row)\n        })\n        .catch(err => { console.error(err) })\n    },\n    deleteData(row, index) {\n      let accesstoken = ''\n      if (JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0] === undefined || JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].username === undefined) {\n        accesstoken = global_system_accesstoken\n      } else {\n        accesstoken = JSON.parse(localStorage.getItem(global_system_storage_key) || '[]')[0].accesstoken\n      }\n      const url = global_system_data_url + '/flow/job/timewindow/rm?accesstoken=' + accesstoken\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n          flowid: this.tableQuery.content,\n          sys: this.temp.sys,\n          job: this.temp.job\n        })\n      })\n        .then(response => response.json())\n        .then((responsedata) => {\n          this.dialogFormVisible = false\n          this.$notify({\n            title: 'Success',\n            message: 'Delete Successfully',\n            type: 'success',\n            duration: 2000\n          })\n          this.tableQuery.pageData.splice(index, 1)\n        })\n        .catch(function(err) {\n          console.log(err)\n          this.$notify({\n            title: 'Error',\n            message: 'Delete Error',\n            type: 'error',\n            duration: 2000\n          })\n        })\n    },\n    getSortClass: function(key) {\n      const sort = this.tableQuery.sort\n      return sort === `+${key}` ? 'ascending' : 'descending'\n    }\n  }\n}\n</script>\n\n<style scoped>\n.components-container div {\n  margin: 10px;\n}\n\n.time-container {\n  display: inline-block;\n}\n</style>\n"],"sourceRoot":"src/views/auto-flow-job"}]}